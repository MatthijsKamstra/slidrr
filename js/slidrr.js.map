{
"version":3,
"file":"slidrr.js",
"sourceRoot":"file:///",
"sources":["/usr/local/lib/haxe/std/js/_std/EReg.hx","/usr/local/lib/haxe/std/js/_std/HxOverrides.hx","/Users/matthijs/Documents/workingdir/haxe/project-slidrr/src/Main.hx","/usr/local/lib/haxe/lib/markdown/1,0,0/Markdown.hx","/usr/local/lib/haxe/std/js/_std/Reflect.hx","/usr/local/lib/haxe/std/js/_std/Std.hx","/usr/local/lib/haxe/std/StringBuf.hx","/usr/local/lib/haxe/std/StringTools.hx","/usr/local/lib/haxe/std/haxe/Log.hx","/usr/local/lib/haxe/std/haxe/Timer.hx","/usr/local/lib/haxe/std/js/_std/haxe/ds/StringMap.hx","/usr/local/lib/haxe/std/js/Boot.hx","/usr/local/lib/haxe/lib/markdown/1,0,0/markdown/AST.hx","/usr/local/lib/haxe/lib/markdown/1,0,0/markdown/BlockParser.hx","/usr/local/lib/haxe/lib/markdown/1,0,0/markdown/HtmlRenderer.hx","/usr/local/lib/haxe/lib/markdown/1,0,0/markdown/InlineParser.hx","/Users/matthijs/Documents/workingdir/haxe/project-slidrr/src/utils/TimeUtil.hx","/Users/matthijs/Documents/workingdir/haxe/project-slidrr/src/view/SlidrrView.hx","/Users/matthijs/Documents/workingdir/haxe/project-slidrr/src/view/SpeakrrNotesView.hx","/Users/matthijs/Documents/workingdir/haxe/project-slidrr/src/model/App.hx"],
"sourcesContent":["/*\n * Copyright (C)2005-2016 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class EReg {\n\n\tvar r : HaxeRegExp;\n\n\tpublic inline function new( r : String, opt : String ) : Void {\n\t\tthis.r = new HaxeRegExp(r, opt.split(\"u\").join(\"\")); // 'u' (utf8) depends on page encoding\n\t}\n\n\tpublic function match( s : String ) : Bool {\n\t\tif( r.global ) r.lastIndex = 0;\n\t\tr.m = r.exec(s);\n\t\tr.s = s;\n\t\treturn (r.m != null);\n\t}\n\n\tpublic function matched( n : Int ) : String {\n\t\treturn if( r.m != null && n >= 0 && n < r.m.length ) r.m[n] else throw \"EReg::matched\";\n\t}\n\n\tpublic function matchedLeft() : String {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\treturn r.s.substr(0,r.m.index);\n\t}\n\n\tpublic function matchedRight() : String {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\tvar sz = r.m.index+r.m[0].length;\n\t\treturn r.s.substr(sz,r.s.length-sz);\n\t}\n\n\tpublic function matchedPos() : { pos : Int, len : Int } {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\treturn { pos : r.m.index, len : r.m[0].length };\n\t}\n\n\tpublic function matchSub( s : String, pos : Int, len : Int = -1):Bool {\n\t\treturn if (r.global) {\n\t\t\tr.lastIndex = pos;\n\t\t\tr.m = r.exec(len < 0 ? s : s.substr(0, pos + len));\n\t\t\tvar b = r.m != null;\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t}\n\t\t\tb;\n\t\t} else {\n\t\t\t// TODO: check some ^/$ related corner cases\n\t\t\tvar b = match( len < 0 ? s.substr(pos) : s.substr(pos,len) );\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t\tr.m.index += pos;\n\t\t\t}\n\t\t\tb;\n\t\t}\n\t}\n\n\tpublic function split( s : String ) : Array<String> {\n\t\t// we can't use directly s.split because it's ignoring the 'g' flag\n\t\tvar d = \"#__delim__#\";\n\t\treturn untyped s.replace(r,d).split(d);\n\t}\n\n\tpublic inline function replace( s : String, by : String ) : String {\n\t\treturn untyped s.replace(r,by);\n\t}\n\n\tpublic function map( s : String, f : EReg -> String ) : String {\n\t\tvar offset = 0;\n\t\tvar buf = new StringBuf();\n\t\tdo {\n\t\t\tif (offset >= s.length)\n\t\t\t\tbreak;\n\t\t\telse if (!matchSub(s, offset)) {\n\t\t\t\tbuf.add(s.substr(offset));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar p = matchedPos();\n\t\t\tbuf.add(s.substr(offset, p.pos - offset));\n\t\t\tbuf.add(f(this));\n\t\t\tif (p.len == 0) {\n\t\t\t\tbuf.add(s.substr(p.pos, 1));\n\t\t\t\toffset = p.pos + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t\toffset = p.pos + p.len;\n\t\t} while (r.global);\n\t\tif (!r.global && offset > 0 && offset < s.length)\n\t\t\tbuf.add(s.substr(offset));\n\t\treturn buf.toString();\n\t}\n}\n\n@:native(\"RegExp\")\nprivate extern class HaxeRegExp extends js.RegExp {\n\tvar m:js.RegExp.RegExpMatch;\n\tvar s:String;\n}\n","/*\n * Copyright (C)2005-2016 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:noDoc\nclass HxOverrides {\n\n\tstatic function dateStr( date :Date ) : String {\n\t\tvar m = date.getMonth() + 1;\n\t\tvar d = date.getDate();\n\t\tvar h = date.getHours();\n\t\tvar mi = date.getMinutes();\n\t\tvar s = date.getSeconds();\n\t\treturn date.getFullYear()\n\t\t\t+\"-\"+(if( m < 10 ) \"0\"+m else \"\"+m)\n\t\t\t+\"-\"+(if( d < 10 ) \"0\"+d else \"\"+d)\n\t\t\t+\" \"+(if( h < 10 ) \"0\"+h else \"\"+h)\n\t\t\t+\":\"+(if( mi < 10 ) \"0\"+mi else \"\"+mi)\n\t\t\t+\":\"+(if( s < 10 ) \"0\"+s else \"\"+s);\n\t}\n\n\tstatic function strDate( s : String ) : Date {\n\t\tswitch( s.length ) {\n\t\tcase 8: // hh:mm:ss\n\t\t\tvar k = s.split(\":\");\n\t\t\tvar d : Date = untyped __new__(Date);\n\t\t\tuntyped d[\"setTime\"](0);\n\t\t\tuntyped d[\"setUTCHours\"](k[0]);\n\t\t\tuntyped d[\"setUTCMinutes\"](k[1]);\n\t\t\tuntyped d[\"setUTCSeconds\"](k[2]);\n\t\t\treturn d;\n\t\tcase 10: // YYYY-MM-DD\n\t\t\tvar k = s.split(\"-\");\n\t\t\treturn new Date(cast k[0],cast untyped k[1] - 1,cast k[2],0,0,0);\n\t\tcase 19: // YYYY-MM-DD hh:mm:ss\n\t\t\tvar k = s.split(\" \");\n\t\t\tvar y = k[0].split(\"-\");\n\t\t\tvar t = k[1].split(\":\");\n\t\t\treturn new Date(cast y[0],cast untyped y[1] - 1,cast y[2],cast t[0],cast t[1],cast t[2]);\n\t\tdefault:\n\t\t\tthrow \"Invalid date format : \" + s;\n\t\t}\n\t}\n\n\tstatic function cca( s : String, index : Int ) : Null<Int> {\n\t\tvar x = (cast s).charCodeAt(index);\n\t\tif( x != x ) // fast isNaN\n\t\t\treturn js.Lib.undefined; // isNaN will still return true\n\t\treturn x;\n\t}\n\n\tstatic function substr( s : String, pos : Int, ?len : Int ) : String {\n\t\tif (len == null) {\n\t\t\tlen = s.length;\n\t\t} else if (len < 0) {\n\t\t\tif (pos == 0)\n\t\t\t\tlen = s.length + len;\n\t\t\telse\n\t\t\t\treturn \"\";\n\t\t}\n\n\t\t#if (js_es < 5)\n\t\tif (pos < 0) {\n\t\t\tpos = s.length + pos;\n\t\t\tif (pos < 0)\n\t\t\t\tpos = 0;\n\t\t}\n\t\t#end\n\n\t\treturn (untyped s).substr(pos, len);\n\t}\n\n\tstatic function indexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i < 0) {\n\t\t\ti += len;\n\t\t\tif (i < 0) i = 0;\n\t\t}\n\t\twhile (i < len)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function lastIndexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i >= len)\n\t\t\ti = len - 1;\n\t\telse if (i < 0)\n\t\t\ti += len;\n\t\twhile (i >= 0)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti--;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function remove<T>( a : Array<T>, obj : T ) {\n\t\tvar i = a.indexOf(obj);\n\t\tif( i == -1 ) return false;\n\t\ta.splice(i,1);\n\t\treturn true;\n\t}\n\n\tstatic function iter<T>( a : Array<T> ) : Iterator<T> untyped {\n\t\treturn {\n\t\t\tcur : 0,\n\t\t\tarr : a,\n\t\t\thasNext : function() {\n\t\t\t\treturn __this__.cur < __this__.arr.length;\n\t\t\t},\n\t\t\tnext : function() {\n\t\t\t\treturn __this__.arr[__this__.cur++];\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic function __init__() untyped {\n#if (js_es < 5)\n\t\t__feature__('HxOverrides.indexOf', if( Array.prototype.indexOf ) __js__(\"HxOverrides\").indexOf = function(a,o,i) return Array.prototype.indexOf.call(a, o, i));\n\t\t__feature__('HxOverrides.lastIndexOf', if( Array.prototype.lastIndexOf ) __js__(\"HxOverrides\").lastIndexOf = function(a,o,i) return Array.prototype.lastIndexOf.call(a, o, i));\n#end\n\t}\n\n}\n","package;\n\nimport jQuery.*;\nimport js.Browser;\nimport js.html.*;\nimport js.html.XMLHttpRequest;\n\nimport model.App;\n\nusing StringTools;\n\nclass Main {\n\n\tprivate var _doc = js.Browser.document;\n\tprivate var _win = js.Browser.window;\n\n\tprivate var _width : Int;\n\tprivate var _height : Int;\n\tprivate var _total : Int;\n\tprivate var _currentId : Int = 0;\n\tprivate var _prevId : Int = 0;\n\n\tprivate var isFullScreen : Bool = false;\n\tprivate var isSpeakrrNotes : Bool = false;\n\n\tprivate var queryArr : Array<String> = ['md', 'split', 'note', 'author', 'time'];\n\n\tprivate var flexContainer : DivElement;\n\n\tpublic function new ()\n\t{\n\t\t/**\n\t\t * test file\n\t\t */\n\t\tif(_doc.getElementById('slidrr-speakrr-notes') != null){\n\t\t\tBrowser.console.debug('** Test speakrr notes ** ');\n\t\t\tisSpeakrrNotes = true;\n\t\t}\n\t\t/**\n\t\t * generated from presentation, for some reason there is no dom ready\n\t\t */\n\t\tif(_doc.getElementById('slidrr-speakrr-notes-gen') != null){\n\t\t\tBrowser.console.info('** Generated speakrr notes ** ');\n\t\t\tisSpeakrrNotes = true;\n\t\t\tinit();\n\t\t}\n\t\t/**\n\t\t * DOM is ready (slidrr-presentation)\n\t\t */\n\t\t_doc.addEventListener(\"DOMContentLoaded\", function(event) {\n\t\t\tBrowser.console.info('** DOM ready **');\n\t\t\tinit();\n\t\t});\n\n\t}\n\n\t/**\n\t * check if there are extra variables set in the url\n\t * @example \tULR?md=slidrrtest.md&author=mck\n\t *\n\t * - md \t\tuse custom named markdownfile (default `slidrr.md`)\n\t * - split \t\tuse custom chapter split (default `--`)\n\t * - author\n\t * - css(#custom-css)\n\t * - time (in minutes)\n\t */\n\tfunction init ()\n\t{\n\t\tvar map : Map<String, String> = new Map();\n\t\tvar arr = _win.location.search.substr(1).split(\"&\");\n\t\tfor ( i in 0 ... arr.length ) {\n\t\t\tvar temp = arr[i].split(\"=\");\n\t\t\tmap.set(temp[0],temp[1]);\n\t\t}\n\n\t\t// trace((map.exists('author')) ? (map.get('author')) : 'niets');\n\n\t\tif(map.exists('md')) \t\tApp.markdown = map.get('md');\n\t\tif(map.exists('split')) \tApp.spliteSlide = map.get('split');\n\t\tif(map.exists('note')) \t\tApp.splitNote = map.get('note');\n\t\tif(map.exists('author'))\tApp.author = map.get('author');\n\t\tif(map.exists('time')) \t\tApp.time = Std.parseInt (map.get('time'));\n\t\tif(map.exists('css')) \t\tApp.css = map.get('css');\n\n\t\tif(App.css != '') addCSS (App.css);\n\n\t\treadTextFile(App.markdown);\n\t}\n\n\t/**\n\t * build the speakrr-notes (press `s`)\n\t * @param\t\tcontent (String) of the markdown file\n\t */\n\tfunction buildNotes (md:String) : Void\n\t{\n\t\tvar speakrrNotes = new view.SpeakrrNotesView(md);\n\t}\n\n\t/**\n\t * build the presentation (default)\n\t * @param\t\tcontent (String) of the markdown file\n\t */\n\tfunction buildPresentation (md:String) : Void\n\t{\n\t\tvar flexContainer = _doc.createDivElement();\n\t\tflexContainer.className = 'slidrr-container';\n\t\t_doc.body.appendChild(flexContainer);\n\n\t\tvar slides : Array<String> = md.split('\\n'+App.spliteSlide+'\\n');\n\t\t_total = slides.length;\n\t\tfor ( i in 0 ... _total )\n\t\t{\n\t\t\tvar slidrrview = new view.SlidrrView(md,flexContainer,i);\n\t\t\ttoggleVisibleSlide(i, false);\n\t\t}\n\n\t\t// first build nav to generate all slides in it\n\t\tbuildNav();\n\t\tvar _nav = _doc.getElementsByClassName('nav')[0];\n\n\t\t// listen to keys\n\t\t_win.onkeydown = function (e){\n\t\t\tonKeyHandler(e);\n\t\t}\n\n\t\t// listen to resize\n\t\t// onResizeHandler ();\n\t\t// _win.onresize = function (){\n\t\t// \tonResizeHandler();\n\t\t// }\n\n\t\t// building blocks\n\t\tbuildProgress();\n\t\tbuildControle();\n\t\tbuildHelp();\n\n\t\tbuildLogo();\n\t\tbuildFocus();\n\n\t\tonResizeHandler ();\n\n\t\t// [mck] readURL should start the correct slide\n\t\treadURL ();\n\n\t\t// [mck] start highlight plugin?\n\t\tuntyped hljs.initHighlightingOnLoad();\n\n\n\n\t\t// trace('#ffffff (white): ${0xffffff}' ); // 16777215\n\t\t// trace('#000000 (black): ${0x000000}' ); // 0\n\t}\n\n\n\tfunction buildProgress () : Void\n\t{\n\t\tvar _container = _doc.createDivElement();\n\t\t_container.className = \"progress\";\n\n\t\tvar _progressbar = _doc.createDivElement();\n\t\t_progressbar.className = \"progress-bar\";\n\n\t\t_container.appendChild(_progressbar);\n\t\t_doc.body.appendChild(_container);\n\t}\n\n\n\tfunction buildControle () : Void\n\t{\n\t\tvar _container = _doc.createDivElement();\n\t\t_container.className = \"controls\";\n\n\t\tvar _arrowL = _doc.createDivElement();\n\t\t_arrowL.className = \"arrow left prev\";\n\t\t_arrowL.innerHTML = \"\";\n\t\tvar _arrowR = _doc.createDivElement();\n\t\t_arrowR.className = \"arrow right next\";\n\t\t_arrowR.innerHTML = \"\";\n\n\t\t_container.appendChild(_arrowL);\n\t\t_container.appendChild(_arrowR);\n\t\t_doc.body.appendChild(_container);\n\n\t\t_arrowL.onclick = _arrowR.onclick = function (e){\n\t\t\tonClickHandler(e);\n\t\t};\n\t}\n\n\n\tfunction buildHelp () : Void\n\t{\n\t\tvar _container = _doc.createDivElement();\n\t\t_container.className = \"help\";\n\t\t_container.innerHTML = Markdown.markdownToHtml(showDefaults());\n\t\t_doc.body.appendChild(_container);\n\t}\n\n\tfunction buildNav () : Void\n\t{\n\t\tvar _container = _doc.createDivElement();\n\t\t_container.className = \"nav\";\n\t\t_container.innerHTML = \"<div class='mini-slide'>test</div>\";\n\t\t_doc.body.appendChild(_container);\n\t}\n\n\n\tfunction buildFocus () : Void\n\t{\n\t\tvar _container = _doc.createDivElement();\n\t\t_container.className = \"focus\";\n\t\t_doc.body.appendChild(_container);\n\t}\n\n\n\tfunction buildLogo() : Void\n\t{\n\t\tvar _container = _doc.createDivElement();\n\t\t_container.className = \"logo\";\n\t\t_doc.body.appendChild(_container);\n\t}\n\n\t// ____________________________________ misc ____________________________________\n\n\t/**\n\t * add css from query string to <head>\n\t *\n\t * @param css path to css: css/test.css\n\t */\n\tfunction addCSS(css:String):Void\n\t{\n\t\tvar head = _doc.getElementsByTagName('head')[0];\n    \tvar s = _doc.createElement('link');\n\t    s.setAttribute('rel', 'stylesheet');\n\t    s.setAttribute('href', '${css}');\n\t    head.appendChild(s);\n\t}\n\n\n\tfunction showDefaults () : String {\n\t\tvar str = '\n\n| action | shortcut |\n| --- | --- |\n| forward | `cursor right` , `.` , `space` |\n| reverse | `cursor left` , `,` |\n| fullscreen | `f` |\n| help | `h` |\n| create black screen | `b` |\n| reverse fullscreen | `esc` |\n| speaker notes | `s` |\n';\n\n\t\tstr += '\\n- markdown: ${App.markdown}';\n\t\tstr += '\\n- slide split: ${App.spliteSlide}';\n\t\tstr += '\\n- note split: ${App.splitNote}';\n\n\t\tstr += '\\n---\\n';\n\t\tfor ( i in 0 ... queryArr.length ) {\n\t\t\tstr += '\\n- queryArr ${queryArr[i]}';\n\t\t}\n\t\tstr += '\\n';\n\n\n\n\t\treturn str;\n\t}\n\n\t// ____________________________________ hash ____________________________________\n\n\t/**\n\t * Updates the page URL (hash) to reflect the current state.\n\t */\n\tfunction writeURL (id:Int) : Void\n\t{\n\t\t// trace('writeURL ($id)');\n\t\tvar url = '/' + Std.string(id);\n\t\t_win.location.hash = url;\n\t}\n\n\t/**\n\t * Reads the current URL (hash) and navigates accordingly.\n\t */\n\tfunction readURL () : Void\n\t{\n\t\tvar hash = _win.location.hash;\n\t\tvar id = Std.parseInt ( hash.split('/')[1] );\n\t\tif(id == null) id = 0;\n\t\t// trace('readURL() $hash, $id');\n\t\tslideId(id,true);\n\t}\n\n\t// ____________________________________ move! ____________________________________\n\n\tfunction move (dir:Int) : Void\n\t{\n\t\tslideId(_prevId,false);\n\n\t\tif(dir == -1)\n\t\t\t_currentId--;\n\t\telse\n\t\t\t_currentId++;\n\n\t\tif(_currentId >= (_total-1)) _currentId = (_total-1);\n\t\tif(_currentId <= 0) _currentId = 0;\n\n\t\tslideId(_currentId,true);\n\t}\n\n\n\tfunction slideId (id:Int, isVisible:Bool) : Void\n\t{\n\t\ttoggleVisibleSlide(id, isVisible);\n\n\t\t_currentId = id;\n\t\t_prevId = id;\n\n\t\twriteURL (id);\n\t\tupdateProgress ();\n\t}\n\n\tfunction toggleVisibleSlide(id:Int, isVisible:Bool) : Void\n\t{\n\t\tvar slide = _doc.getElementById(\"slidrr-\" + id);\n\t\tvar css = slide.className.replace('hidden','').rtrim().replace('  ',' ');\n\t\tslide.className = (isVisible) ? css : (css + \" hidden\");\n\t}\n\n\n\tfunction updateProgress () : Void\n\t{\n\t\tvar percentage = (_currentId/(_total-1))*100;\n\t\tvar progress =_doc.getElementsByClassName(\"progress-bar\")[0];\n\t\tprogress.style.width = Std.string(percentage) + '%';\n\t}\n\n\t// ____________________________________ toggle screens ____________________________________\n\n\tpublic function toggleFullscreen () : Void\n\t{\n\t\tif(!isFullScreen)\n\t\t{\n\t\t\tisFullScreen = true;\n\t\t\tvar elem = _doc.documentElement;\n\t\t\tif (untyped elem.requestFullscreen) {\n\t\t\t\tuntyped elem.requestFullscreen();\n\t\t\t} else if (untyped elem.msRequestFullscreen) {\n\t\t\t\tuntyped elem.msRequestFullscreen();\n\t\t\t} else if (untyped elem.mozRequestFullScreen) {\n\t\t\t\tuntyped elem.mozRequestFullScreen();\n\t\t\t} else if (untyped elem.webkitRequestFullscreen) {\n\t\t\t\tuntyped elem.webkitRequestFullscreen();\n\t\t\t}\n\t\t} else {\n\t\t\tisFullScreen = false;\n\t\t\tif (untyped _doc.exitFullscreen) {\n\t\t\t\tuntyped _doc.exitFullscreen();\n\t\t\t} else if (untyped _doc.msExitFullscreen) {\n\t\t\t\tuntyped _doc.msExitFullscreen();\n\t\t\t} else if (untyped _doc.mozCancelFullScreen) {\n\t\t\t\tuntyped _doc.mozCancelFullScreen();\n\t\t\t} else if (untyped _doc.webkitExitFullscreen) {\n\t\t\t\tuntyped _doc.webkitExitFullscreen();\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction toggleHelp () : Void {\n\t\ttrace('toggleHelp');\n\t\tvar help = _doc.getElementsByClassName('help')[0];\n\t\tif(help.style.visibility == 'visible')\n\t\t{\n\t\t\thelp.style.visibility = 'hidden';\n\t\t\thelp.style.opacity = '0';\n\t\t} else {\n\t\t\thelp.style.visibility = 'visible';\n\t\t\thelp.style.opacity = '1';\n\t\t}\n\t}\n\n\tfunction toggleNav () : Void {\n\t\t// trace('toggleNav');\n\t\tvar help = _doc.getElementsByClassName('nav')[0];\n\t\tif(help.style.visibility == 'visible')\n\t\t{\n\t\t\thelp.style.visibility = 'hidden';\n\t\t\thelp.style.opacity = '0';\n\t\t} else {\n\t\t\thelp.style.visibility = 'visible';\n\t\t\thelp.style.opacity = '1';\n\t\t}\n\t}\n\n\n\tfunction toggleFocus () : Void\n\t{\n\t\tvar focus = _doc.getElementsByClassName('focus')[0];\n\t\tif(focus.style.visibility == 'visible')\n\t\t{\n\t\t\tfocus.style.visibility = 'hidden';\n\t\t\tfocus.style.opacity = '0';\n\t\t} else {\n\t\t\tfocus.style.visibility = 'visible';\n\t\t\tfocus.style.opacity = '1';\n\t\t}\n\t}\n\n\n\tfunction showSpeakerNotes () : Void {\n\t\ttrace('showSpeakerNotes');\n\n\t\t// [mck] TODO :: check if window is open\n\n\t\t// var notesPopup = _win.open( 'notes.html', 'Notes', 'width=1100,height=700' );\n\n\t\tvar html  = '\n<!DOCTYPE html>\n<html lang=\"en\" id=\"slidrr-speakrr-notes-gen\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->\n\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"\">\n    <link rel=\"icon\" href=\"favicon.ico\">\n\n\t<meta name=\"google\" value=\"notranslate\">\n\n\t<title>Slidrr :: Speakrr-Notes</title>\n\n\t<!-- Latest compiled and minified CSS -->\n\t<!--<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\" integrity=\"sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7\" crossorigin=\"anonymous\">-->\n\n\t<!-- custom css -->\n\t<link rel=\"stylesheet\" href=\"css/slidrr.css\" >\n\t<link rel=\"stylesheet\" href=\"css/monokai-sublime-min.css\" >\n\n<script>\n//respond to events\nwindow.addEventListener(\\'message\\',function(event) {\n\tconsole.log(\\'message received:  \\' + event.data,event);\n\tevent.source.postMessage(\\'holla back youngin!\\',event.origin);\n},false);\n</script>\n\n</head>\n<body>\n\n\t<div id=\"current-slide\"></div>\n\t<div id=\"upcoming-slide\"></div>\n\t<div id=\"speaker-controls\">\n\t\t<div class=\"speaker-controls-time\">\n\t\t\t<h4 class=\"label\">Time <span class=\"reset-button\">Click to Reset</span></h4>\n\t\t\t<div class=\"clock\"></div>\n\t\t\t<div class=\"timer\"></div>\n\t\t\t<div class=\"countdown\"></div>\n\t\t</div>\n\t\t<div class=\"speaker-controls-notes\">\n\t\t\t<h4 class=\"label\">Notes</h4>\n\t\t\t<div class=\"value\"></div>\n\t\t</div>\n\t</div>\n\n\n\t<!-- Code generated using Haxe -->\n\t<script type=\"text/javascript\" src=\"js/highlight.pack.js\"></script>\n\t<script type=\"text/javascript\" src=\"js/slidrr.js\"></script>\n</body>\n</html>\n';\n\n\n\t\tvar notesPopup = _win.open('', 'Notes::','width=1100,height=700');\n\t\tnotesPopup.document.write(html);\n\n\t\t// var timer = new haxe.Timer(6000); // 1000ms delay\n\t\t// timer.run = function() {\n\t\t// \tvar message = 'Hello!  The time is: ' + (Date.now().getTime());\n\t\t// \ttrace('blog.local:  sending message:  ' + message);\n\t\t// \tnotesPopup.postMessage(message,'*'); //send the message and target URI\n\t\t// }\n\n\t\t//listen to holla back\n\t\t_win.addEventListener('message',function(event) {\n\t\t\t// if(event.origin !== 'http://scriptandstyle.com') return;\n\t\t\ttrace('received response: ' , event.data);\n\t\t},false);\n\n\t\t// var timer = new haxe.Timer(6000); // 1000ms delay\n\t\t// timer.run = function() {\n\t\t// \tvar message = 'Hello!  The time is: ' + (Date.now().getTime());\n\t\t// \ttrace('blog.local:  sending message:  ' + message);\n\t\t// \tnotesPopup.postMessage(message,''); //send the message and target URI\n\t\t// }\n\n\t}\n\n\n\t// ____________________________________ handlers ____________________________________\n\n\tfunction onKeyHandler(e:KeyboardEvent) : Void\n\t{\n\t\t// trace(e.keyCode);\n\t\tswitch (e.keyCode) {\n\t\t\tcase 37 : move(-1); // cursor left\n\t\t\tcase 188 : move(-1); // , <\n\t\t\tcase 39 : move(1); // cursor right\n\t\t\tcase 32 : move(1); // space\n\t\t\tcase 190 : move(1); // . >\n\t\t\tcase 70 : toggleFullscreen(); // f / fullscreen\n\t\t\tcase 72 : toggleHelp(); // h / help\n\t\t\tcase 66 : toggleFocus(); // b / black\n\t\t\tcase 83 : showSpeakerNotes();  // s / speaker note\n\t\t\tcase 78 : toggleNav();  // n / navigation\n\t\t}\n\t}\n\n\tfunction onClickHandler (e) : Void\n\t{\n\t\tvar temp : DivElement = cast e.currentTarget;\n\t\tif(temp.className.indexOf('left') != -1){\n\t\t\ttrace('left');\n\t\t\tmove(-1);\n\t\t} else {\n\t\t\ttrace('right');\n\t\t\tmove(1);\n\t\t}\n\t}\n\n\tfunction onResizeHandler () : Void\n\t{\n\t\t_width = _win.innerWidth;\n\t\t_height = _win.innerHeight;\n\t}\n\n\t// ____________________________________ read markdown file ____________________________________\n\n\tfunction readTextFile(file):Void\n\t{\n\t\tvar rawFile = new XMLHttpRequest();\n\t\trawFile.open(\"GET\", file, false);\n\t\trawFile.onreadystatechange = function ()\n\t\t{\n\t\t\tif(rawFile.readyState == 4)\n\t\t\t{\n\t\t\t\tif(rawFile.status == 200 || rawFile.status == 0)\n\t\t\t\t{\n\t\t\t\t\tvar md = rawFile.responseText;\n\t\t\t\t\tif(!isSpeakrrNotes)\n\t\t\t\t\t\tbuildPresentation(md);\n\t\t\t\t\telse\n\t\t\t\t\t\tbuildNotes(md);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trawFile.send();\n\t}\n\n\t// ____________________________________ Haxe is awesome! ____________________________________\n\n\tstatic public function main () {\n\t\tvar app = new Main ();\n\t}\n}","import markdown.AST;\nimport markdown.InlineParser;\nimport markdown.BlockParser;\nimport markdown.HtmlRenderer;\nusing StringTools;\nusing Lambda;\n\nclass Markdown\n{\n\t#if sys\n\tpublic static function main()\n\t{\n\t\tvar args = Sys.args();\n\n\t\tvar last:String = (new haxe.io.Path(args[args.length-1])).toString();\n\t\tvar slash = last.substr(-1);\n\t\tif (slash==\"/\"|| slash==\"\\\\\") \n\t\t\tlast = last.substr(0,last.length-1);\n\t\tif (sys.FileSystem.exists(last) && sys.FileSystem.isDirectory(last)) {\n\t\t\tSys.setCwd(last);\n\t\t}\n\n\t\tvar source = args[0];\n\t\tif (source == \"-f\") source = sys.io.File.getContent(args[1]);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tvar output = markdownToHtml(source);\n\t\t\tSys.print(output);\n\t\t\tSys.exit(0);\n\t\t}\n\t\tcatch (e:Dynamic)\n\t\t{\n\t\t\tSys.print(\"Error: \" + haxe.CallStack.toString(haxe.CallStack.exceptionStack()));\n\t\t\tSys.exit(1);\n\t\t}\n\t}\n\t#end\n\n\tpublic static function markdownToHtml(markdown:String):String\n\t{\n\t\t// create document\n\t\tvar document = new Document();\n\n\t\ttry\n\t\t{\n\t\t\t// replace windows line endings with unix, and split\n\t\t\tvar lines = ~/(\\r\\n|\\r)/g.replace(markdown, '\\n').split(\"\\n\");\n\n\t\t\t// parse ref links\n\t\t\tdocument.parseRefLinks(lines);\n\n\t\t\t// parse ast\n\t\t\tvar blocks = document.parseLines(lines);\n\t\t\treturn renderHtml(blocks);\n\t\t}\n\t\tcatch (e:Dynamic)\n\t\t{\n\t\t\treturn '<pre>$e</pre>';\n\t\t}\n\t}\n\n\tpublic static function renderHtml(blocks:Array<Node>):String\n\t{\n\t\treturn new HtmlRenderer().render(blocks);\n\t}\n}\n\n/**\n\tMaintains the context needed to parse a markdown document.\n**/\nclass Document\n{\n\tpublic var refLinks:Map<String, Link>;\n\tpublic var inlineSyntaxes:Array<InlineSyntax>;\n\tpublic var linkResolver:Resolver;\n\n\tpublic function new()\n\t{\n\t\trefLinks = new Map();\n\t\tinlineSyntaxes = [];\n\t}\n\n\tpublic function parseRefLinks(lines:Array<String>)\n\t{\n\t\t// This is a hideous regex. It matches:\n\t\t// [id]: http:foo.com \"some title\"\n\t\t// Where there may whitespace in there, and where the title may be in\n\t\t// single quotes, double quotes, or parentheses.\n\t\tvar indent = '^[ ]{0,3}';\t// Leading indentation.\n\t\tvar id = '\\\\[([^\\\\]]+)\\\\]';\t// Reference id in [brackets].\n\t\tvar quote = '\"[^\"]+\"';\t\t// Title in \"double quotes\".\n\t\tvar apos = \"'[^']+'\";\t\t// Title in 'single quotes'.\n\t\tvar paren = \"\\\\([^)]+\\\\)\";\t// Title in (parentheses).\n\t\tvar titles =\tnew EReg('($quote|$apos|$paren)', '');\n\t\tvar link = new EReg(\n\t\t\t'$indent$id:\\\\s+(\\\\S+)\\\\s*($quote|$apos|$paren|)\\\\s*$', '');\n\n\n\t\tfor (i in 0...lines.length)\n\t\t{\n\t\t\tif (!link.match(lines[i])) continue;\n\t\t\t\n\t\t\t// Parse the link.\n\t\t\tvar id = link.matched(1);\n\t\t\tvar url = link.matched(2);\n\t\t\tvar title = link.matched(3);\n\t\t\t\n\t\t\tif (url.startsWith('<') && url.endsWith('>'))\n\t\t\t\turl = url.substr(1, url.length - 2);\n\n\t\t\t// next line could be a title, apparently\n\t\t\tif (title == '' && lines[i + 1] != null && titles.match(lines[i + 1]))\n\t\t\t{\n\t\t\t\ttitle = titles.matched(1);\n\t\t\t\tlines[i + 1] = '';\n\t\t\t}\n\n\t\t\tif (title == '')\n\t\t\t{\n\t\t\t\t// No title.\n\t\t\t\ttitle = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Remove \"\", '', or ().\n\t\t\t\ttitle = title.substring(1, title.length - 1);\n\t\t\t}\n\n\t\t\t// References are case-insensitive.\n\t\t\tid = id.toLowerCase();\n\t\t\trefLinks.set(id, new Link(id, url, title));\n\n\t\t\t// Remove it from the output. We replace it with a blank line which \n\t\t\t// will get consumed by later processing.\n\t\t\tlines[i] = '';\n\t\t}\n\t}\n\n\t/**\n\t\tParse the given [lines] of markdown to a series of AST nodes.\n\t**/\n\tpublic function parseLines(lines:Array<String>):Array<Node>\n\t{\n\t\tvar parser = new BlockParser(lines, this);\n\t\tvar blocks = [];\n\n\t\twhile (!parser.isDone)\n\t\t{\n\t\t\tfor (syntax in BlockSyntax.syntaxes)\n\t\t\t{\n\t\t\t\tif (syntax.canParse(parser))\n\t\t\t\t{\n\t\t\t\t\tvar block = syntax.parse(parser);\n\t\t\t\t\tif (block != null) blocks.push(block);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn blocks;\n\t}\n\n\t/**\n\t\tTakes a string of raw text and processes all inline markdown tags,\n\t\treturning a list of AST nodes. For example, given ``\"*this **is** a*\n\t\t`markdown`\"``, returns:\n\t\t`<em>this <strong>is</strong> a</em> <code>markdown</code>`.\n\t**/\n\tpublic function parseInline(text:String):Array<Node>\n\t{\n\t\treturn new InlineParser(text, this).parse();\n\t}\n}\n\nclass Link\n{\n\tpublic var id(default, null):String;\n\tpublic var url(default, null):String;\n\tpublic var title(default, null):String;\n\n\tpublic function new(id:String, url:String, title:String)\n\t{\n\t\tthis.id = id;\n\t\tthis.url = url;\n\t\tthis.title = title;\n\t}\n}\n\ntypedef Resolver = String -> Node;\n","/*\n * Copyright (C)2005-2016 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class Reflect {\n\n\t@:pure\n\tpublic inline static function hasField( o : Dynamic, field : String ) : Bool {\n\t\treturn untyped __js__('Object').prototype.hasOwnProperty.call(o, field);\n\t}\n\n\tpublic static function field( o : Dynamic, field : String ) : Dynamic {\n\t\ttry return untyped o[field] catch( e : Dynamic ) return null;\n\t}\n\n\tpublic inline static function setField( o : Dynamic, field : String, value : Dynamic ) : Void untyped {\n\t\to[field] = value;\n\t}\n\n\tpublic static inline function getProperty( o : Dynamic, field : String ) : Dynamic untyped {\n\t\tvar tmp;\n\t\treturn if( o == null ) __define_feature__(\"Reflect.getProperty\",null) else if( o.__properties__ && (tmp=o.__properties__[\"get_\"+field]) ) o[tmp]() else o[field];\n\t}\n\n\tpublic static inline function setProperty( o : Dynamic, field : String, value : Dynamic ) : Void untyped {\n\t\tvar tmp;\n\t\tif( o.__properties__ && (tmp=o.__properties__[\"set_\"+field]) ) o[tmp](value) else o[field] = __define_feature__(\"Reflect.setProperty\",value);\n\t}\n\n\tpublic inline static function callMethod( o : Dynamic, func : haxe.Constraints.Function, args : Array<Dynamic> ) : Dynamic untyped {\n\t\treturn func.apply(o,args);\n\t}\n\n\tpublic static function fields( o : Dynamic ) : Array<String> {\n\t\tvar a = [];\n\t\tif (o != null) untyped {\n\t\t\tvar hasOwnProperty = __js__('Object').prototype.hasOwnProperty;\n\t\t\t__js__(\"for( var f in o ) {\");\n\t\t\tif( f != \"__id__\" && f != \"hx__closures__\" && hasOwnProperty.call(o, f) ) a.push(f);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn a;\n\t}\n\n\tpublic static function isFunction( f : Dynamic ) : Bool untyped {\n\t\treturn __js__(\"typeof(f)\") == \"function\" && !(js.Boot.isClass(f) || js.Boot.isEnum(f));\n\t}\n\n\tpublic static function compare<T>( a : T, b : T ) : Int {\n\t\treturn ( a == b ) ? 0 : (((cast a) > (cast b)) ? 1 : -1);\n\t}\n\n\tpublic static function compareMethods( f1 : Dynamic, f2 : Dynamic ) : Bool {\n\t\tif( f1 == f2 )\n\t\t\treturn true;\n\t\tif( !isFunction(f1) || !isFunction(f2) )\n\t\t\treturn false;\n\t\treturn f1.scope == f2.scope && f1.method == f2.method && f1.method != null;\n\t}\n\n\tpublic static function isObject( v : Dynamic ) : Bool untyped {\n\t\tif( v == null )\n\t\t\treturn false;\n\t\tvar t = __js__(\"typeof(v)\");\n\t\treturn (t == \"string\" || (t == \"object\" && v.__enum__ == null)) || (t == \"function\" && (js.Boot.isClass(v) || js.Boot.isEnum(v)) != null);\n\t}\n\n\tpublic static function isEnumValue( v : Dynamic ) : Bool {\n\t\treturn v != null && v.__enum__ != null;\n\t}\n\n\tpublic static function deleteField( o : Dynamic, field : String ) : Bool untyped {\n\t\tif( !hasField(o,field) ) return false;\n\t\t__js__(\"delete\")(o[field]);\n\t\treturn true;\n\t}\n\n\tpublic static function copy<T>( o : T ) : T {\n\t\tvar o2 : Dynamic = {};\n\t\tfor( f in Reflect.fields(o) )\n\t\t\tReflect.setField(o2,f,Reflect.field(o,f));\n\t\treturn o2;\n\t}\n\n\t@:overload(function( f : Array<Dynamic> -> Void ) : Dynamic {})\n\tpublic static function makeVarArgs( f : Array<Dynamic> -> Dynamic ) : Dynamic {\n\t\treturn function() {\n\t\t\tvar a = untyped Array.prototype.slice.call(__js__(\"arguments\"));\n\t\t\treturn f(a);\n\t\t};\n\t}\n\n}\n","/*\n * Copyright (C)2005-2016 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport js.Boot;\n\n@:keepInit\n@:coreApi class Std {\n\n\tpublic static inline function is( v : Dynamic, t : Dynamic ) : Bool {\n\t\treturn untyped js.Boot.__instanceof(v,t);\n\t}\n\n\tpublic static inline function instance<T:{},S:T>( value : T, c : Class<S> ) : S {\n\t\treturn untyped __instanceof__(value, c) ? cast value : null;\n\t}\n\n\tpublic static function string( s : Dynamic ) : String {\n\t\treturn untyped js.Boot.__string_rec(s,\"\");\n\t}\n\n\tpublic static inline function int( x : Float ) : Int {\n\t\treturn (cast x) | 0;\n\t}\n\n\tpublic static function parseInt( x : String ) : Null<Int> {\n\t\tvar v = untyped __js__(\"parseInt\")(x, 10);\n\t\t// parse again if hexadecimal\n\t\tif( v == 0 && (x.charCodeAt(1) == 'x'.code || x.charCodeAt(1) == 'X'.code) )\n\t\t\tv = untyped __js__(\"parseInt\")(x);\n\t\tif( untyped __js__(\"isNaN\")(v) )\n\t\t\treturn null;\n\t\treturn cast v;\n\t}\n\n\tpublic static inline function parseFloat( x : String ) : Float {\n\t\treturn untyped __js__(\"parseFloat\")(x);\n\t}\n\n\tpublic static function random( x : Int ) : Int {\n\t\treturn x <= 0 ? 0 : Math.floor(Math.random()*x);\n\t}\n\n\tstatic function __init__() : Void untyped {\n\t\t__feature__(\"js.Boot.getClass\",String.prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"String\"] = String,String));\n\t\t__feature__(\"js.Boot.isClass\",String.__name__ = __feature__(\"Type.getClassName\",[\"String\"],true));\n\t\t__feature__(\"Type.resolveClass\",$hxClasses[\"Array\"] = Array);\n\t\t__feature__(\"js.Boot.isClass\",Array.__name__ = __feature__(\"Type.getClassName\",[\"Array\"],true));\n\t\t__feature__(\"Date.*\", {\n\t\t\t__feature__(\"js.Boot.getClass\",__js__('Date').prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"Date\"] = __js__('Date'),__js__('Date')));\n\t\t\t__feature__(\"js.Boot.isClass\",__js__('Date').__name__ = [\"Date\"]);\n\t\t});\n\t\t__feature__(\"Int.*\",{\n\t\t\tvar Int = __feature__(\"Type.resolveClass\", $hxClasses[\"Int\"] = { __name__ : [\"Int\"] }, { __name__ : [\"Int\"] });\n\t\t});\n\t\t__feature__(\"Dynamic.*\",{\n\t\t\tvar Dynamic = __feature__(\"Type.resolveClass\", $hxClasses[\"Dynamic\"] = { __name__ : [\"Dynamic\"] }, { __name__ : [\"Dynamic\"] });\n\t\t});\n\t\t__feature__(\"Float.*\",{\n\t\t\tvar Float = __feature__(\"Type.resolveClass\", $hxClasses[\"Float\"] = __js__(\"Number\"), __js__(\"Number\"));\n\t\t\tFloat.__name__ = [\"Float\"];\n\t\t});\n\t\t__feature__(\"Bool.*\",{\n\t\t\tvar Bool = __feature__(\"Type.resolveEnum\",$hxClasses[\"Bool\"] = __js__(\"Boolean\"), __js__(\"Boolean\"));\n\t\t\tBool.__ename__ = [\"Bool\"];\n\t\t});\n\t\t__feature__(\"Class.*\",{\n\t\t\tvar Class = __feature__(\"Type.resolveClass\", $hxClasses[\"Class\"] = { __name__ : [\"Class\"] }, { __name__ : [\"Class\"] });\n\t\t});\n\t\t__feature__(\"Enum.*\",{\n\t\t\tvar Enum = {};\n\t\t});\n\t\t__feature__(\"Void.*\",{\n\t\t\tvar Void = __feature__(\"Type.resolveEnum\", $hxClasses[\"Void\"] = { __ename__ : [\"Void\"] }, { __ename__ : [\"Void\"] });\n\t\t});\n\n#if (js_es < 5)\n\t\t__feature__(\"Array.map\",\n\t\t\tif( Array.prototype.map == null )\n\t\t\t\tArray.prototype.map = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length )\n\t\t\t\t\t\ta[i] = f(__this__[i]);\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n\t\t__feature__(\"Array.filter\",\n\t\t\tif( Array.prototype.filter == null )\n\t\t\t\tArray.prototype.filter = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length ) {\n\t\t\t\t\t\tvar e = __this__[i];\n\t\t\t\t\t\tif( f(e) ) a.push(e);\n\t\t\t\t\t}\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2016 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tA String buffer is an efficient way to build a big string by appending small\n\telements together.\n\n\tIts cross-platform implementation uses String concatenation internally, but\n\tStringBuf may be optimized for different targets.\n\n\tUnlike String, an instance of StringBuf is not immutable in the sense that\n\tit can be passed as argument to functions which modify it by appending more\n\tvalues. However, the internal buffer cannot be modified.\n**/\nclass StringBuf {\n\n\tvar b:String;\n\n\t/**\n\t\tThe length of `this` StringBuf in characters.\n\t**/\n\tpublic var length(get,never) : Int;\n\n\t/**\n\t\tCreates a new StringBuf instance.\n\n\t\tThis may involve initialization of the internal buffer.\n\t**/\n\tpublic inline function new() {\n\t\tb = \"\";\n\t}\n\n\tinline function get_length() : Int {\n\t\treturn b.length;\n\t}\n\n\t/**\n\t\tAppends the representation of `x` to `this` StringBuf.\n\n\t\tThe exact representation of `x` may vary per platform. To get more\n\t\tconsistent behavior, this function should be called with\n\t\tStd.string(x).\n\n\t\tIf `x` is null, the String \"null\" is appended.\n\t**/\n\tpublic inline function add<T>( x : T ) : Void {\n\t\tb += x;\n\t}\n\n\t/**\n\t\tAppends the character identified by `c` to `this` StringBuf.\n\n\t\tIf `c` is negative or has another invalid value, the result is\n\t\tunspecified.\n\t**/\n\tpublic inline function addChar( c : Int ) : Void {\n\t\tb += String.fromCharCode(c);\n\t}\n\n\t/**\n\t\tAppends a substring of `s` to `this` StringBuf.\n\n\t\tThis function expects `pos` and `len` to describe a valid substring of\n\t\t`s`, or else the result is unspecified. To get more robust behavior,\n\t\t`this.add(s.substr(pos,len))` can be used instead.\n\n\t\tIf `s` or `pos` are null, the result is unspecified.\n\n\t\tIf `len` is omitted or null, the substring ranges from `pos` to the end\n\t\tof `s`.\n\t**/\n\tpublic inline function addSub( s : String, pos : Int, ?len : Int) : Void {\n\t\tb += (len == null ? s.substr(pos) : s.substr(pos, len));\n\t}\n\n\t/**\n\t\tReturns the content of `this` StringBuf as String.\n\n\t\tThe buffer is not emptied by this operation.\n\t**/\n\tpublic inline function toString() : String {\n\t\treturn b;\n\t}\n\n}\n","/*\n * Copyright (C)2005-2016 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tThis class provides advanced methods on Strings. It is ideally used with\n\t`using StringTools` and then acts as an [extension](http://haxe.org/manual/lf-static-extension.html)\n\tto the `String` class.\n\n\tIf the first argument to any of the methods is null, the result is\n\tunspecified.\n**/\n#if cpp\nusing cpp.NativeString;\n#end\nclass StringTools {\n\t/**\n\t\tEncode an URL by using the standard format.\n\t**/\n\t#if (!java && !cpp && !lua) inline #end public static function urlEncode( s : String ) : String {\n\t\t#if flash\n\t\t\treturn untyped __global__[\"encodeURIComponent\"](s);\n\t\t#elseif neko\n\t\t\treturn untyped new String(_urlEncode(s.__s));\n\t\t#elseif js\n\t\t\treturn untyped encodeURIComponent(s);\n\t\t#elseif cpp\n\t\t\treturn untyped s.__URLEncode();\n\t\t#elseif java\n\t\t\treturn postProcessUrlEncode(java.net.URLEncoder.encode(s, \"UTF-8\"));\n\t\t#elseif cs\n\t\t\treturn untyped cs.system.Uri.EscapeDataString(s);\n\t\t#elseif python\n\t\t\treturn python.lib.urllib.Parse.quote(s, \"\");\n\t\t#elseif hl\n\t\t\tvar len = 0;\n\t\t\tvar b = @:privateAccess s.bytes.urlEncode(len);\n\t\t\treturn @:privateAccess String.__alloc__(b,len);\n\t\t#elseif lua\n\t\t\ts = lua.NativeStringTools.gsub(s, \"\\n\", \"\\r\\n\");\n\t\t\ts = lua.NativeStringTools.gsub(s, \"([^%w %-%_%.%~])\", function (c) {\n\t\t\t\treturn lua.NativeStringTools.format(\"%%%02X\", lua.NativeStringTools.byte(c) + '');\n\t\t\t});\n\t\t\ts = lua.NativeStringTools.gsub(s, \" \", \"+\");\n\t\t\treturn s;\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n#if java\n\tprivate static function postProcessUrlEncode( s : String ) : String {\n\t\tvar ret = new StringBuf();\n\t\tvar i = 0,\n\t\t    len = s.length;\n\t\twhile (i < len) {\n\t\t\tswitch(_charAt(s, i++)) {\n\t\t\tcase '+'.code:\n\t\t\t\tret.add('%20');\n\t\t\tcase '%'.code if (i <= len - 2):\n\t\t\t\tvar c1 = _charAt(s, i++),\n\t\t\t\t    c2 = _charAt(s, i++);\n\t\t\t\tswitch[c1, c2] {\n\t\t\t\tcase ['2'.code, '1'.code]:\n\t\t\t\t\tret.addChar('!'.code);\n\t\t\t\tcase ['2'.code, '7'.code]:\n\t\t\t\t\tret.addChar('\\''.code);\n\t\t\t\tcase ['2'.code, '8'.code]:\n\t\t\t\t\tret.addChar('('.code);\n\t\t\t\tcase ['2'.code, '9'.code]:\n\t\t\t\t\tret.addChar(')'.code);\n\t\t\t\tcase ['7'.code, 'E'.code]:\n\t\t\t\t\tret.addChar('-'.code);\n\t\t\t\tcase _:\n\t\t\t\t\tret.addChar('%'.code);\n\t\t\t\t\tret.addChar(cast c1);\n\t\t\t\t\tret.addChar(cast c2);\n\t\t\t\t}\n\t\t\tcase chr:\n\t\t\t\tret.addChar(cast chr);\n\t\t\t}\n\t\t}\n\t\treturn ret.toString();\n\t}\n#end\n\n\t/**\n\t\tDecode an URL using the standard format.\n\t**/\n\t#if (!java && !cpp && !lua) inline #end public static function urlDecode( s : String ) : String {\n\t\t#if flash\n\t\t\treturn untyped __global__[\"decodeURIComponent\"](s.split(\"+\").join(\" \"));\n\t\t#elseif neko\n\t\t\treturn untyped new String(_urlDecode(s.__s));\n\t\t#elseif js\n\t\t\treturn untyped decodeURIComponent(s.split(\"+\").join(\" \"));\n\t\t#elseif cpp\n\t\t\treturn untyped s.__URLDecode();\n\t\t#elseif java\n\t\t\ttry\n\t\t\t\treturn untyped __java__(\"java.net.URLDecoder.decode(s, \\\"UTF-8\\\")\")\n\t\t\tcatch (e:Dynamic) throw e;\n\t\t#elseif cs\n\t\t\treturn untyped cs.system.Uri.UnescapeDataString(s);\n\t\t#elseif python\n\t\t\treturn python.lib.urllib.Parse.unquote(s);\n\t\t#elseif hl\n\t\t\tvar len = 0;\n\t\t\tvar b = @:privateAccess s.bytes.urlDecode(len);\n\t\t\treturn @:privateAccess String.__alloc__(b,len);\n\t\t#elseif lua\n\t\t\ts = lua.NativeStringTools.gsub (s, \"+\", \" \");\n\t\t\ts = lua.NativeStringTools.gsub (s, \"%%(%x%x)\",\n\t\t\t\tfunction(h) {return lua.NativeStringTools.char(lua.Lua.tonumber(h,16));});\n\t\t\ts = lua.NativeStringTools.gsub (s, \"\\r\\n\", \"\\n\");\n\t\t\treturn s;\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n\t/**\n\t\tEscapes HTML special characters of the string `s`.\n\n\t\tThe following replacements are made:\n\n\t\t- `&` becomes `&amp`;\n\t\t- `<` becomes `&lt`;\n\t\t- `>` becomes `&gt`;\n\n\t\tIf `quotes` is true, the following characters are also replaced:\n\n\t\t- `\"` becomes `&quot`;\n\t\t- `'` becomes `&#039`;\n\t**/\n\tpublic static function htmlEscape( s : String, ?quotes : Bool ) : String {\n\t\ts = s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n\t\treturn quotes ? s.split('\"').join(\"&quot;\").split(\"'\").join(\"&#039;\") : s;\n\t}\n\n\t/**\n\t\tUnescapes HTML special characters of the string `s`.\n\n\t\tThis is the inverse operation to htmlEscape, i.e. the following always\n\t\tholds: `htmlUnescape(htmlEscape(s)) == s`\n\n\t\tThe replacements follow:\n\n\t\t- `&amp;` becomes `&`\n\t\t- `&lt;` becomes `<`\n\t\t- `&gt;` becomes `>`\n\t\t- `&quot;` becomes `\"`\n\t\t- `&#039;` becomes `'`\n\t**/\n\tpublic static function htmlUnescape( s : String ) : String {\n\t\treturn s.split(\"&gt;\").join(\">\").split(\"&lt;\").join(\"<\").split(\"&quot;\").join('\"').split(\"&#039;\").join(\"'\").split(\"&amp;\").join(\"&\");\n\t}\n\n\t/**\n\t\tTells if the string `s` starts with the string `start`.\n\n\t\tIf `start` is `null`, the result is unspecified.\n\n\t\tIf `start` is the empty String `\"\"`, the result is true.\n\t**/\n\tpublic static #if (cs || java) inline #end function startsWith( s : String, start : String ) : Bool {\n\t\t#if java\n\t\treturn untyped s.startsWith(start);\n\t\t#elseif cs\n\t\treturn untyped s.StartsWith(start);\n\t\t#elseif cpp\n\t\tif (s.length<start.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str();\n\t\tvar p1 = start.c_str();\n\t\tfor(i in 0...start.length)\n\t\t\tif ( p0.at(i) != p1.at(i) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#elseif hl\n\t\treturn @:privateAccess (s.length >= start.length && s.bytes.compare(0,start.bytes,0,start.length<<1) == 0);\n\t\t#else\n\t\treturn( s.length >= start.length && s.substr(0, start.length) == start );\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the string `s` ends with the string `end`.\n\n\t\tIf `end` is `null`, the result is unspecified.\n\n\t\tIf `end` is the empty String `\"\"`, the result is true.\n\t**/\n\tpublic static #if (cs || java) inline #end function endsWith( s : String, end : String ) : Bool {\n\t\t#if java\n\t\treturn untyped s.endsWith(end);\n\t\t#elseif cs\n\t\treturn untyped s.EndsWith(end);\n\t\t#elseif cpp\n\t\tif (s.length<end.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str().add( s.length-end.length );\n\t\tvar p1 = end.c_str();\n\t\tfor(i in 0...end.length)\n\t\t\tif ( p0.at(i) != p1.at(i) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#elseif hl\n\t\tvar elen = end.length;\n\t\tvar slen = s.length;\n\t\treturn @:privateAccess (slen >= elen && s.bytes.compare((slen - elen) << 1, end.bytes, 0, elen << 1) == 0);\n\t\t#else\n\t\tvar elen = end.length;\n\t\tvar slen = s.length;\n\t\treturn( slen >= elen && s.substr(slen - elen, elen) == end );\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the character in the string `s` at position `pos` is a space.\n\n\t\tA character is considered to be a space character if its character code\n\t\tis 9,10,11,12,13 or 32.\n\n\t\tIf `s` is the empty String `\"\"`, or if pos is not a valid position within\n\t\t`s`, the result is false.\n\t**/\n\tpublic static function isSpace( s : String, pos : Int ) : Bool {\n\t\t#if (python || lua)\n\t\tif (s.length == 0 || pos < 0 || pos >= s.length) return false;\n\t\t#end\n\t\tvar c = s.charCodeAt( pos );\n\t\treturn (c > 8 && c < 14) || c == 32;\n\t}\n\n\t/**\n\t\tRemoves leading space characters of `s`.\n\n\t\tThis function internally calls `isSpace()` to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String `\"\"` or consists only of space characters, the\n\t\tresult is the empty String `\"\"`.\n\t**/\n\tpublic #if cs inline #end static function ltrim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.TrimStart();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile( r < l && isSpace(s,r) ){\n\t\t\tr++;\n\t\t}\n\t\tif( r > 0 )\n\t\t\treturn s.substr(r, l-r);\n\t\telse\n\t\t\treturn s;\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves trailing space characters of `s`.\n\n\t\tThis function internally calls `isSpace()` to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String `\"\"` or consists only of space characters, the\n\t\tresult is the empty String `\"\"`.\n\t**/\n\tpublic #if cs inline #end static function rtrim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.TrimEnd();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile( r < l && isSpace(s,l-r-1) ){\n\t\t\tr++;\n\t\t}\n\t\tif( r > 0 ){\n\t\t\treturn s.substr(0, l-r);\n\t\t}else{\n\t\t\treturn s;\n\t\t}\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves leading and trailing space characters of `s`.\n\n\t\tThis is a convenience function for `ltrim(rtrim(s))`.\n\t**/\n\tpublic #if (cs || java) inline #end static function trim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.Trim();\n\t\t#elseif java\n\t\treturn untyped s.trim();\n\t\t#else\n\t\treturn ltrim(rtrim(s));\n\t\t#end\n\t}\n\n\t/**\n\t\tConcatenates `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String `\"\"` or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function lpad( s : String, c : String, l : Int ) : String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\twhile (s.length < l) {\n\t\t\ts = c + s;\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tAppends `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String `\"\"` or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function rpad( s : String, c : String, l : Int ) : String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\twhile (s.length < l) {\n\t\t\ts = s + c;\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tReplace all occurences of the String `sub` in the String `s` by the\n\t\tString `by`.\n\n\t\tIf `sub` is the empty String `\"\"`, `by` is inserted after each character\n\t\tof `s`. If `by` is also the empty String `\"\"`, `s` remains unchanged.\n\n\t\tThis is a convenience function for `s.split(sub).join(by)`.\n\n\t\tIf `sub` or `by` are null, the result is unspecified.\n\t**/\n\tpublic static function replace( s : String, sub : String, by : String ) : String {\n\t\t#if java\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.replace(sub, by);\n\t\t#elseif cs\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.Replace(sub, by);\n\t\t#else\n\t\treturn s.split(sub).join(by);\n\t\t#end\n\t}\n\n\t/**\n\t\tEncodes `n` into a hexadecimal representation.\n\n\t\tIf `digits` is specified, the resulting String is padded with \"0\" until\n\t\tits `length` equals `digits`.\n\t**/\n\tpublic static function hex( n : Int, ?digits : Int ) {\n\t\t#if flash\n\t\t\tvar n : UInt = n;\n\t\t\tvar s : String = untyped n.toString(16);\n\t\t\ts = s.toUpperCase();\n\t\t#else\n\t\t\tvar s = \"\";\n\t\t\tvar hexChars = \"0123456789ABCDEF\";\n\t\t\tdo {\n\t\t\t\ts = hexChars.charAt(n&15) + s;\n\t\t\t\tn >>>= 4;\n\t\t\t} while( n > 0 );\n\t\t#end\n\t\t#if python\n\t\tif (digits != null && s.length < digits) {\n\t\t\tvar diff = digits - s.length;\n\t\t\tfor (_ in 0...diff) {\n\t\t\t\ts = \"0\" + s;\n\t\t\t}\n\t\t}\n\t\t#else\n\t\tif( digits != null )\n\t\t\twhile( s.length < digits )\n\t\t\t\ts = \"0\"+s;\n\t\t#end\n\t\treturn s;\n\t}\n\n\t/**\n\t\tReturns the character code at position `index` of String `s`, or an\n\t\tend-of-file indicator at if `position` equals `s.length`.\n\n\t\tThis method is faster than `String.charCodeAt()` on some platforms, but\n\t\tthe result is unspecified if `index` is negative or greater than\n\t\t`s.length`.\n\n\t\tEnd of file status can be checked by calling `StringTools.isEof()` with\n\t\tthe returned value as argument.\n\n\t\tThis operation is not guaranteed to work if `s` contains the `\\0`\n\t\tcharacter.\n\t**/\n\tpublic static inline function fastCodeAt( s : String, index : Int ) : Int {\n\t\t#if neko\n\t\treturn untyped __dollar__sget(s.__s, index);\n\t\t#elseif cpp\n\t\treturn untyped s.cca(index);\n\t\t#elseif flash\n\t\treturn untyped s.cca(index);\n\t\t#elseif java\n\t\treturn ( index < s.length ) ? cast(_charAt(s, index), Int) : -1;\n\t\t#elseif cs\n\t\treturn ( cast(index, UInt) < s.length ) ? cast(s[index], Int) : -1;\n\t\t#elseif js\n\t\treturn (untyped s).charCodeAt(index);\n\t\t#elseif python\n\t\treturn if (index >= s.length) -1 else python.internal.UBuiltins.ord(python.Syntax.arrayAccess(s, index));\n\t\t#elseif hl\n\t\treturn @:privateAccess s.bytes.getUI16(index << 1);\n\t\t#elseif lua\n\t\treturn lua.NativeStringTools.byte(s,index+1);\n\t\t#else\n\t\treturn untyped s.cca(index);\n\t\t#end\n\t}\n\n\t/*\n\t\tTells if `c` represents the end-of-file (EOF) character.\n\t*/\n\t@:noUsing public static inline function isEof( c : Int ) : Bool {\n\t\t#if (flash || cpp || hl)\n\t\treturn c == 0;\n\t\t#elseif js\n\t\treturn c != c; // fast NaN\n\t\t#elseif (neko || lua)\n\t\treturn c == null;\n\t\t#elseif cs\n\t\treturn c == -1;\n\t\t#elseif java\n\t\treturn c == -1;\n\t\t#elseif python\n\t\treturn c == -1;\n\t\t#else\n\t\treturn false;\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns a String that can be used as a single command line argument\n\t\ton Unix.\n\t\tThe input will be quoted, or escaped if necessary.\n\t*/\n\tpublic static function quoteUnixArg(argument:String):String {\n\t\t// Based on cpython's shlex.quote().\n\t\t// https://hg.python.org/cpython/file/a3f076d4f54f/Lib/shlex.py#l278\n\n\t\tif (argument == \"\")\n\t\t\treturn \"''\";\n\n\t\tif (!~/[^a-zA-Z0-9_@%+=:,.\\/-]/.match(argument))\n\t\t\treturn argument;\n\n\t\t// use single quotes, and put single quotes into double quotes\n\t\t// the string $'b is then quoted as '$'\"'\"'b'\n\t\treturn \"'\" + replace(argument, \"'\", \"'\\\"'\\\"'\") + \"'\";\n\t}\n\n\t/**\n\t\tCharacter codes of the characters that will be escaped by `quoteWinArg(_, true)`.\n\t*/\n\tpublic static var winMetaCharacters = [\" \".code, \"(\".code, \")\".code, \"%\".code, \"!\".code, \"^\".code, \"\\\"\".code, \"<\".code, \">\".code, \"&\".code, \"|\".code, \"\\n\".code, \"\\r\".code];\n\n\t/**\n\t\tReturns a String that can be used as a single command line argument\n\t\ton Windows.\n\t\tThe input will be quoted, or escaped if necessary, such that the output\n\t\twill be parsed as a single argument using the rule specified in\n\t\thttp://msdn.microsoft.com/en-us/library/ms880421\n\n\t\tExamples:\n\t\t```\n\t\tquoteWinArg(\"abc\") == \"abc\";\n\t\tquoteWinArg(\"ab c\") == '\"ab c\"';\n\t\t```\n\t*/\n\tpublic static function quoteWinArg(argument:String, escapeMetaCharacters:Bool):String {\n\t\t// If there is no space, tab, back-slash, or double-quotes, and it is not an empty string.\n\t\tif (!~/^[^ \\t\\\\\"]+$/.match(argument)) {\n\n\t\t\t// Based on cpython's subprocess.list2cmdline().\n\t\t\t// https://hg.python.org/cpython/file/50741316dd3a/Lib/subprocess.py#l620\n\n\t\t\tvar result = new StringBuf();\n\t\t\tvar needquote = argument.indexOf(\" \") != -1 || argument.indexOf(\"\\t\") != -1 || argument == \"\";\n\n\t\t\tif (needquote)\n\t\t\t\tresult.add('\"');\n\n\t\t\tvar bs_buf = new StringBuf();\n\t\t\tfor (i in 0...argument.length) {\n\t\t\t\tswitch (argument.charCodeAt(i)) {\n\t\t\t\t\tcase \"\\\\\".code:\n\t\t\t\t\t\t// Don't know if we need to double yet.\n\t\t\t\t\t\tbs_buf.add(\"\\\\\");\n\t\t\t\t\tcase '\"'.code:\n\t\t\t\t\t\t// Double backslashes.\n\t\t\t\t\t\tvar bs = bs_buf.toString();\n\t\t\t\t\t\tresult.add(bs);\n\t\t\t\t\t\tresult.add(bs);\n\t\t\t\t\t\tbs_buf = new StringBuf();\n\t\t\t\t\t\tresult.add('\\\\\"');\n\t\t\t\t\tcase c:\n\t\t\t\t\t\t// Normal char\n\t\t\t\t\t\tif (bs_buf.length > 0) {\n\t\t\t\t\t\t\tresult.add(bs_buf.toString());\n\t\t\t\t\t\t\tbs_buf = new StringBuf();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.addChar(c);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add remaining backslashes, if any.\n\t\t\tresult.add(bs_buf.toString());\n\n\t\t\tif (needquote) {\n\t\t\t\tresult.add(bs_buf.toString());\n\t\t\t\tresult.add('\"');\n\t\t\t}\n\n\t\t\targument = result.toString();\n\t\t}\n\n\t\tif (escapeMetaCharacters) {\n\t\t\tvar result = new StringBuf();\n\t\t\tfor (i in 0...argument.length) {\n\t\t\t\tvar c = argument.charCodeAt(i);\n\t\t\t\tif (winMetaCharacters.indexOf(c) >= 0) {\n\t\t\t\t\tresult.addChar(\"^\".code);\n\t\t\t\t}\n\t\t\t\tresult.addChar(c);\n\t\t\t}\n\t\t\treturn result.toString();\n\t\t} else {\n\t\t\treturn argument;\n\t\t}\n\t}\n\n\t#if java\n\tprivate static inline function _charAt(str:String, idx:Int):java.StdTypes.Char16 return untyped str._charAt(idx);\n\t#end\n\n\t#if neko\n\tprivate static var _urlEncode = neko.Lib.load(\"std\",\"url_encode\",1);\n\tprivate static var _urlDecode = neko.Lib.load(\"std\",\"url_decode\",1);\n\t#end\n\n}\n","/*\n * Copyright (C)2005-2016 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tLog primarily provides the `trace()` method, which is invoked upon a call to\n\t`trace()` in Haxe code.\n**/\nclass Log {\n\n\t/**\n\t\tOutputs `v` in a platform-dependent way.\n\n\t\tThe second parameter `infos` is injected by the compiler and contains\n\t\tinformation about the position where the `trace()` call was made.\n\n\t\tThis method can be rebound to a custom function:\n\t\t\tvar oldTrace = haxe.Log.trace; // store old function\n\t\t\thaxe.Log.trace = function(v,infos) { // handle trace }\n\t\t\t...\n\t\t\thaxe.Log.trace = oldTrace;\n\n\t\tIf it is bound to null, subsequent calls to `trace()` will cause an\n\t\texception.\n\t**/\n\tpublic static dynamic function trace( v : Dynamic, ?infos : PosInfos ) : Void {\n\t\t#if flash\n\t\t\t#if (fdb || native_trace)\n\t\t\t\tvar pstr = infos == null ? \"(null)\" : infos.fileName + \":\" + infos.lineNumber;\n\t\t\t\tvar str = flash.Boot.__string_rec(v, \"\");\n\t\t\t\tif( infos != null && infos.customParams != null ) for( v in infos.customParams ) str += \",\" + flash.Boot.__string_rec(v, \"\");\n\t\t\t\tuntyped __global__[\"trace\"](pstr+\": \"+str);\n\t\t\t#else\n\t\t\t\tuntyped flash.Boot.__trace(v,infos);\n\t\t\t#end\n\t\t#elseif neko\n\t\t\tuntyped {\n\t\t\t\t$print(infos.fileName + \":\" + infos.lineNumber + \": \", v);\n\t\t\t\tif( infos.customParams != null ) for( v in infos.customParams ) $print(\",\", v);\n\t\t\t\t$print(\"\\n\");\n\t\t\t}\n\t\t#elseif js\n\t\t\tuntyped js.Boot.__trace(v,infos);\n\t\t#elseif php\n\t\t\tif (infos!=null && infos.customParams!=null) {\n\t\t\t\tvar extra:String = \"\";\n\t\t\t\tfor( v in infos.customParams )\n\t\t\t\t\textra += \",\" + v;\n\t\t\t\tuntyped __call__('_hx_trace', v + extra, infos);\n\t\t\t}\n\t\t\telse\n\t\t\t\tuntyped __call__('_hx_trace', v, infos);\n\t\t#elseif cpp\n\t\t\tif (infos!=null && infos.customParams!=null) {\n\t\t\t\tvar extra:String = \"\";\n\t\t\t\tfor( v in infos.customParams )\n\t\t\t\t\textra += \",\" + v;\n\t\t\t\tuntyped __trace(v + extra,infos);\n\t\t\t}\n\t\t\telse\n\t\t\t\tuntyped __trace(v,infos);\n\t\t#elseif (cs || java || lua)\n\t\t\tvar str:String = null;\n\t\t\tif (infos != null) {\n\t\t\t\tstr = infos.fileName + \":\" + infos.lineNumber + \": \" + v;\n\t\t\t\tif (infos.customParams != null)\n\t\t\t\t{\n\t\t\t\t\tstr += \",\" + infos.customParams.join(\",\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr = v;\n\t\t\t}\n\t\t\t#if cs\n\t\t\tcs.system.Console.WriteLine(str);\n\t\t\t#elseif java\n\t\t\tSys.println(str);\n\t\t\t#elseif lua\n\t\t\tuntyped __lua__(\"_hx_print({0})\", lua.Boot.__string_rec(str));\n\t\t\t#end\n\t\t#elseif (python)\n\t\t\tvar str:String = null;\n\t\t\tif (infos != null) {\n\t\t\t\tstr = infos.fileName + \":\" + Std.string(infos.lineNumber) + \": \" + v;\n\t\t\t\tif (infos.customParams != null) {\n\t\t\t\t\tstr += \",\" + infos.customParams.join(\",\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr = v;\n\t\t\t}\n\t\t\tpython.Lib.println(str);\n\t\t#elseif hl\n\t\t\tvar pstr = infos == null ? \"(null)\" : infos.fileName + \":\" + infos.lineNumber;\n\t\t\tvar str = Std.string(v);\n\t\t\tif( infos != null && infos.customParams != null ) for( v in infos.customParams ) str += \",\" + Std.string(v);\n\t\t\tSys.println(pstr+\": \"+str);\n\t\t#end\n\t}\n\n\t#if (flash || js)\n\t/**\n\t\tClears the trace output.\n\t**/\n\tpublic static dynamic function clear() : Void {\n\t\t#if flash\n\t\tuntyped flash.Boot.__clear_trace();\n\t\t#elseif js\n\t\tuntyped js.Boot.__clear_trace();\n\t\t#end\n\t}\n\t#end\n\n\t#if flash\n\t/**\n\t\tSets the color of the trace output to `rgb`.\n\t**/\n\tpublic static dynamic function setColor( rgb : Int ) {\n\t\tuntyped flash.Boot.__set_trace_color(rgb);\n\t}\n\t#end\n\n}\n","/*\n * Copyright (C)2005-2016 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tThe Timer class allows you to create asynchronous timers on platforms that\n\tsupport events.\n\n\tThe intended usage is to create an instance of the Timer class with a given\n\tinterval, set its run() method to a custom function to be invoked and\n\teventually call stop() to stop the Timer.\n\n\tNote that a running Timer may or may not prevent the program to exit\n\tautomatically when main() returns.\n\n\tIt is also possible to extend this class and override its run() method in\n\tthe child class.\n**/\nclass Timer {\n\n\t#if (flash || js)\n\t\tprivate var id : Null<Int>;\n\t#elseif java\n\t\tprivate var timer : java.util.Timer;\n\t\tprivate var task : java.util.TimerTask;\n\t#else\n\t\tprivate var event : MainLoop.MainEvent;\n\t#end\n\n\t/**\n\t\tCreates a new timer that will run every `time_ms` milliseconds.\n\n\t\tAfter creating the Timer instance, it calls `this.run` repeatedly,\n\t\twith delays of `time_ms` milliseconds, until `this.stop` is called.\n\n\t\tThe first invocation occurs after `time_ms` milliseconds, not\n\t\timmediately.\n\n\t\tThe accuracy of this may be platform-dependent.\n\t**/\n\tpublic function new( time_ms : Int ){\n\t\t#if flash\n\t\t\tvar me = this;\n\t\t\tid = untyped __global__[\"flash.utils.setInterval\"](function() { me.run(); },time_ms);\n\t\t#elseif js\n\t\t\tvar me = this;\n\t\t\tid = untyped setInterval(function() me.run(),time_ms);\n\t\t#elseif java\n\t\t\ttimer = new java.util.Timer();\n\t\t\ttimer.scheduleAtFixedRate(task = new TimerTask(this), haxe.Int64.ofInt(time_ms), haxe.Int64.ofInt(time_ms));\n\t\t#else\n\t\t\tvar dt = time_ms / 1000;\n\t\t\tevent = MainLoop.add(function() {\n\t\t\t\t@:privateAccess event.nextRun += dt;\n\t\t\t\trun();\n\t\t\t});\n\t\t\tevent.delay(dt);\n\t\t#end\n\t}\n\n\t/**\n\t\tStops `this` Timer.\n\n\t\tAfter calling this method, no additional invocations of `this.run`\n\t\twill occur.\n\n\t\tIt is not possible to restart `this` Timer once stopped.\n\t**/\n\tpublic function stop() {\n\t\t#if (flash || js)\n\t\t\tif( id == null )\n\t\t\t\treturn;\n\t\t\t#if flash\n\t\t\t\tuntyped __global__[\"flash.utils.clearInterval\"](id);\n\t\t\t#elseif js\n\t\t\t\tuntyped clearInterval(id);\n\t\t\t#end\n\t\t\tid = null;\n\t\t#elseif java\n\t\t\tif(timer != null) {\n\t\t\t\ttimer.cancel();\n\t\t\t\ttimer = null;\n\t\t\t}\n\t\t\ttask = null;\n\t\t#else\n\t\t\tif( event != null ) {\n\t\t\t\tevent.stop();\n\t\t\t\tevent = null;\n\t\t\t}\n\t\t#end\n\t}\n\n\t/**\n\t\tThis method is invoked repeatedly on `this` Timer.\n\n\t\tIt can be overridden in a subclass, or rebound directly to a custom\n\t\tfunction:\n\t\t\tvar timer = new haxe.Timer(1000); // 1000ms delay\n\t\t\ttimer.run = function() { ... }\n\n\t\tOnce bound, it can still be rebound to different functions until `this`\n\t\tTimer is stopped through a call to `this.stop`.\n\t**/\n\tpublic dynamic function run() {\n\n\t}\n\n\t/**\n\t\tInvokes `f` after `time_ms` milliseconds.\n\n\t\tThis is a convenience function for creating a new Timer instance with\n\t\t`time_ms` as argument, binding its run() method to `f` and then stopping\n\t\t`this` Timer upon the first invocation.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function delay( f : Void -> Void, time_ms : Int ) {\n\t\tvar t = new haxe.Timer(time_ms);\n\t\tt.run = function() {\n\t\t\tt.stop();\n\t\t\tf();\n\t\t};\n\t\treturn t;\n\t}\n\n\t/**\n\t\tMeasures the time it takes to execute `f`, in seconds with fractions.\n\n\t\tThis is a convenience function for calculating the difference between\n\t\tTimer.stamp() before and after the invocation of `f`.\n\n\t\tThe difference is passed as argument to Log.trace(), with \"s\" appended\n\t\tto denote the unit. The optional `pos` argument is passed through.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function measure<T>( f : Void -> T, ?pos : PosInfos ) : T {\n\t\tvar t0 = stamp();\n\t\tvar r = f();\n\t\tLog.trace((stamp() - t0) + \"s\", pos);\n\t\treturn r;\n\t}\n\n\t/**\n\t\tReturns a timestamp, in seconds with fractions.\n\n\t\tThe value itself might differ depending on platforms, only differences\n\t\tbetween two values make sense.\n\t**/\n\tpublic static function stamp() : Float {\n\t\t#if flash\n\t\t\treturn flash.Lib.getTimer() / 1000;\n\t\t#elseif (neko || php)\n\t\t\treturn Sys.time();\n\t\t#elseif js\n\t\t\treturn Date.now().getTime() / 1000;\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__time_stamp();\n\t\t#elseif sys\n\t\t\treturn Sys.time();\n\t\t#else\n\t\t\treturn 0;\n\t\t#end\n\t}\n\n}\n\n#if java\n@:nativeGen\nprivate class TimerTask extends java.util.TimerTask {\n\tvar timer:Timer;\n\tpublic function new(timer:Timer):Void {\n\t\tsuper();\n\t\tthis.timer = timer;\n\t}\n\n\t@:overload override public function run():Void {\n\t\ttimer.run();\n\t}\n}\n#end\n","/*\n * Copyright (C)2005-2016 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.ds;\n\nprivate class StringMapIterator<T> {\n\tvar map : StringMap<T>;\n\tvar keys : Array<String>;\n\tvar index : Int;\n\tvar count : Int;\n\tpublic inline function new(map:StringMap<T>, keys:Array<String>) {\n\t\tthis.map = map;\n\t\tthis.keys = keys;\n\t\tthis.index = 0;\n\t\tthis.count = keys.length;\n\t}\n\tpublic inline function hasNext() {\n\t\treturn index < count;\n\t}\n\tpublic inline function next() {\n\t\treturn map.get(keys[index++]);\n\t}\n}\n\n@:coreApi class StringMap<T> implements haxe.Constraints.IMap<String,T> {\n\n\tprivate var h : Dynamic;\n\tprivate var rh : Dynamic;\n\n\tpublic inline function new() : Void {\n\t\th = {};\n\t}\n\n\tinline function isReserved(key:String) : Bool {\n\t\treturn untyped __js__(\"__map_reserved\")[key] != null;\n\t}\n\n\tpublic inline function set( key : String, value : T ) : Void {\n\t\tif( isReserved(key) )\n\t\t\tsetReserved(key, value);\n\t\telse\n\t\t\th[cast key] = value;\n\t}\n\n\tpublic inline function get( key : String ) : Null<T> {\n\t\tif( isReserved(key) )\n\t\t\treturn getReserved(key);\n\t\treturn h[cast key];\n\t}\n\n\tpublic inline function exists( key : String ) : Bool {\n\t\tif( isReserved(key) )\n\t\t\treturn existsReserved(key);\n\t\treturn h.hasOwnProperty(key);\n\t}\n\n\tfunction setReserved( key : String, value : T ) : Void {\n\t\tif( rh == null ) rh = {};\n\t\trh[cast \"$\"+key] = value;\n\t}\n\n\tfunction getReserved( key : String ) : Null<T> {\n\t\treturn rh == null ? null : rh[cast \"$\"+key];\n\t}\n\n\tfunction existsReserved( key : String ) : Bool {\n\t\tif( rh == null ) return false;\n\t\treturn untyped rh.hasOwnProperty(\"$\"+key);\n\t}\n\n\tpublic function remove( key : String ) : Bool {\n\t\tif( isReserved(key) ) {\n\t\t\tkey = \"$\" + key;\n\t\t\tif( rh == null || !rh.hasOwnProperty(key) ) return false;\n\t\t\tuntyped __js__(\"delete\")(rh[key]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif( !h.hasOwnProperty(key) )\n\t\t\t\treturn false;\n\t\t\tuntyped __js__(\"delete\")(h[key]);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function keys() : Iterator<String> {\n\t\treturn arrayKeys().iterator();\n\t}\n\t\n\tfunction arrayKeys() : Array<String> {\n\t\tvar out = [];\n\t\tuntyped {\n\t\t\t__js__(\"for( var key in this.h ) {\");\n\t\t\t\tif( h.hasOwnProperty(key) )\n\t\t\t\t\tout.push(key);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\tif( rh != null ) untyped {\n\t\t\t__js__(\"for( var key in this.rh ) {\");\n\t\t\t\tif( key.charCodeAt(0) == \"$\".code )\n\t\t\t\t\tout.push(key.substr(1));\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn out;\n\t}\n\n\tpublic inline function iterator() : Iterator<T> {\n\t\treturn new StringMapIterator(this, arrayKeys());\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar keys = arrayKeys();\n\t\tfor( i in 0...keys.length ) {\n\t\t\tvar k = keys[i];\n\t\t\ts.add(k);\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(k)));\n\t\t\tif( i < keys.length-1 )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n\tstatic function __init__() : Void {\n\t\tuntyped __js__(\"var __map_reserved = {}\");\n\t}\n\n}\n","/*\n * Copyright (C)2005-2016 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js;\n\nprivate class HaxeError extends js.Error {\n\n\tvar val:Dynamic;\n\n\tpublic function new(val:Dynamic) untyped {\n\t\tsuper();\n\t\tthis.val = __define_feature__(\"js.Boot.HaxeError\", val);\n\t\tthis.message = String(val);\n\t\tif (js.Error.captureStackTrace) js.Error.captureStackTrace(this, HaxeError);\n\t}\n\n\tpublic static function wrap(val:Dynamic):Dynamic untyped {\n\t\treturn if (__instanceof__(val, js.Error)) val else new HaxeError(val);\n\t}\n}\n\n@:dox(hide)\nclass Boot {\n\n\tprivate static function __unhtml(s : String) {\n\t\treturn s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n\t}\n\n\tprivate static function __trace(v,i : haxe.PosInfos) {\n\t\tuntyped {\n\t\t\tvar msg = if( i != null ) i.fileName+\":\"+i.lineNumber+\": \" else \"\";\n\t\t\t#if jsfl\n\t\t\tmsg += __string_rec(v,\"\");\n\t\t\tfl.trace(msg);\n\t\t\t#else\n\t\t\tmsg += __string_rec(v, \"\");\n\t\t\tif( i != null && i.customParams != null )\n\t\t\t\tfor( v in i.customParams )\n\t\t\t\t\tmsg += \",\" + __string_rec(v, \"\");\n\t\t\tvar d;\n\t\t\tif( __js__(\"typeof\")(document) != \"undefined\" && (d = document.getElementById(\"haxe:trace\")) != null )\n\t\t\t\td.innerHTML += __unhtml(msg)+\"<br/>\";\n\t\t\telse if( __js__(\"typeof console\") != \"undefined\" && __js__(\"console\").log != null )\n\t\t\t\t__js__(\"console\").log(msg);\n\t\t\t#end\n\t\t}\n\t}\n\n\tprivate static function __clear_trace() {\n\t\tuntyped {\n\t\t\t#if jsfl\n\t\t\tfl.outputPanel.clear();\n\t\t\t#else\n\t\t\tvar d = document.getElementById(\"haxe:trace\");\n\t\t\tif( d != null )\n\t\t\t\td.innerHTML = \"\";\n\t\t\t#end\n\t\t}\n\t}\n\n\tstatic inline function isClass(o:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isClass\", o.__name__);\n\t}\n\n\tstatic inline function isEnum(e:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isEnum\", e.__ename__);\n\t}\n\n\tstatic function getClass(o:Dynamic) : Dynamic {\n\t\tif (Std.is(o, Array))\n\t\t\treturn Array;\n\t\telse {\n\t\t\tvar cl = untyped __define_feature__(\"js.Boot.getClass\", o.__class__);\n\t\t\tif (cl != null)\n\t\t\t\treturn cl;\n\t\t\tvar name = __nativeClassName(o);\n\t\t\tif (name != null)\n\t\t\t\treturn __resolveNativeClass(name);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@:ifFeature(\"has_enum\")\n\tprivate static function __string_rec(o,s:String) {\n\t\tuntyped {\n\t\t\tif( o == null )\n\t\t\t    return \"null\";\n\t\t\tif( s.length >= 5 )\n\t\t\t\treturn \"<...>\"; // too much deep recursion\n\t\t\tvar t = __js__(\"typeof(o)\");\n\t\t\tif( t == \"function\" && (isClass(o) || isEnum(o)) )\n\t\t\t\tt = \"object\";\n\t\t\tswitch( t ) {\n\t\t\tcase \"object\":\n\t\t\t\tif( __js__(\"o instanceof Array\") ) {\n\t\t\t\t\tif( o.__enum__ ) {\n\t\t\t\t\t\tif( o.length == 2 )\n\t\t\t\t\t\t\treturn o[0];\n\t\t\t\t\t\tvar str = o[0]+\"(\";\n\t\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\t\tfor( i in 2...o.length ) {\n\t\t\t\t\t\t\tif( i != 2 )\n\t\t\t\t\t\t\t\tstr += \",\" + __string_rec(o[i],s);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tstr += __string_rec(o[i],s);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + \")\";\n\t\t\t\t\t}\n\t\t\t\t\tvar l = o.length;\n\t\t\t\t\tvar i;\n\t\t\t\t\tvar str = \"[\";\n\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\tfor( i in 0...l )\n\t\t\t\t\t\tstr += (if (i > 0) \",\" else \"\")+__string_rec(o[i],s);\n\t\t\t\t\tstr += \"]\";\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t\tvar tostr;\n\t\t\t\ttry {\n\t\t\t\t\ttostr = untyped o.toString;\n\t\t\t\t} catch( e : Dynamic ) {\n\t\t\t\t\t// strange error on IE\n\t\t\t\t\treturn \"???\";\n\t\t\t\t}\n\t\t\t\tif( tostr != null && tostr != __js__(\"Object.toString\") && __typeof__(tostr) == \"function\" ) {\n\t\t\t\t\tvar s2 = o.toString();\n\t\t\t\t\tif( s2 != \"[object Object]\")\n\t\t\t\t\t\treturn s2;\n\t\t\t\t}\n\t\t\t\tvar k : String = null;\n\t\t\t\tvar str = \"{\\n\";\n\t\t\t\ts += \"\\t\";\n\t\t\t\tvar hasp = (o.hasOwnProperty != null);\n\t\t\t\t__js__(\"for( var k in o ) {\");\n\t\t\t\t\tif( hasp && !o.hasOwnProperty(k) )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\" )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( str.length != 2 )\n\t\t\t\t\t\tstr += \", \\n\";\n\t\t\t\t\tstr += s + k + \" : \"+__string_rec(o[k],s);\n\t\t\t\t__js__(\"}\");\n\t\t\t\ts = s.substring(1);\n\t\t\t\tstr += \"\\n\" + s + \"}\";\n\t\t\t\treturn str;\n\t\t\tcase \"function\":\n\t\t\t\treturn \"<function>\";\n\t\t\tcase \"string\":\n\t\t\t\treturn o;\n\t\t\tdefault:\n\t\t\t\treturn String(o);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static function __interfLoop(cc : Dynamic,cl : Dynamic) {\n\t\tif( cc == null )\n\t\t\treturn false;\n\t\tif( cc == cl )\n\t\t\treturn true;\n\t\tvar intf : Dynamic = cc.__interfaces__;\n\t\tif( intf != null )\n\t\t\tfor( i in 0...intf.length ) {\n\t\t\t\tvar i : Dynamic = intf[i];\n\t\t\t\tif( i == cl || __interfLoop(i,cl) )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\treturn __interfLoop(cc.__super__,cl);\n\t}\n\n\t@:ifFeature(\"typed_catch\") private static function __instanceof(o : Dynamic,cl : Dynamic) {\n\t\tif( cl == null )\n\t\t\treturn false;\n\t\tswitch( cl ) {\n\t\tcase Int:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"number\" && untyped __js__(\"(o|0) === o\");\n\t\tcase Float:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"number\";\n\t\tcase Bool:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"boolean\";\n\t\tcase String:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"string\";\n\t\tcase Array:\n\t\t\treturn (untyped __js__(\"(o instanceof Array)\")) && o.__enum__ == null;\n\t\tcase Dynamic:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\tif( o != null ) {\n\t\t\t\t// Check if o is an instance of a Haxe class or a native JS object\n\t\t\t\tif( (untyped __js__(\"typeof\"))(cl) == \"function\" ) {\n\t\t\t\t\tif( untyped __js__(\"o instanceof cl\") )\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tif( __interfLoop(getClass(o),cl) )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if ( (untyped __js__(\"typeof\"))(cl) == \"object\" && __isNativeObj(cl) ) {\n\t\t\t\t\tif( untyped __js__(\"o instanceof cl\") )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// do not use isClass/isEnum here\n\t\t\tuntyped __feature__(\"Class.*\",if( cl == Class && o.__name__ != null ) return true);\n\t\t\tuntyped __feature__(\"Enum.*\",if( cl == Enum && o.__ename__ != null ) return true);\n\t\t\treturn o.__enum__ == cl;\n\t\t}\n\t}\n\n\t@:ifFeature(\"typed_cast\") private static function __cast(o : Dynamic, t : Dynamic) {\n\t\tif (__instanceof(o, t)) return o;\n\t\telse throw \"Cannot cast \" +Std.string(o) + \" to \" +Std.string(t);\n\t}\n\n\tstatic var __toStr = untyped ({}).toString;\n\t// get native JS [[Class]]\n\tstatic function __nativeClassName(o:Dynamic):String {\n\t\tvar name = untyped __toStr.call(o).slice(8, -1);\n\t\t// exclude general Object and Function\n\t\t// also exclude Math and JSON, because instanceof cannot be called on them\n\t\tif (name == \"Object\" || name == \"Function\" || name == \"Math\" || name == \"JSON\")\n\t\t\treturn null;\n\t\treturn name;\n\t}\n\n\t// check for usable native JS object\n\tstatic function __isNativeObj(o:Dynamic):Bool {\n\t\treturn __nativeClassName(o) != null;\n\t}\n\n\t// resolve native JS class in the global scope:\n\tstatic function __resolveNativeClass(name:String) {\n\t\treturn untyped js.Lib.global[name];\n\t}\n\n}\n","package markdown;\n\n/**\n\tBase class for any AST item. Roughly corresponds to Node in the DOM. Will\n\tbe either an ElementNode or TextNode.\n**/\ninterface Node\n{\n\tfunction accept(visitor:NodeVisitor):Void;\n}\n\n/**\n\tVisitor pattern for the AST. Renderers or other AST transformers should\n\timplement this.\n**/\ninterface NodeVisitor\n{\n\t/**\n\t\tCalled when a TextNode has been reached.\n\t**/\n\tfunction visitText(text:TextNode):Void;\n\n\t/**\n\t\tCalled when an ElementNode has been reached, before its children have been\n\t\tvisited. Return `false` to skip its children.\n\t**/\n\tfunction visitElementBefore(element:ElementNode):Bool;\n\n\t/**\n\t\tCalled when an ElementNode has been reached, after its children have been\n\t\tvisited. Will not be called if [visitElementBefore] returns `false`.\n\t**/\n\tfunction visitElementAfter(element:ElementNode):Void;\n}\n\n/**\n\tA named tag that can contain other nodes.\n**/\nclass ElementNode implements Node\n{\n\tpublic static function empty(tag:String):ElementNode\n\t{\n\t\treturn new ElementNode(tag, null);\n\t}\n\n\tpublic static function withTag(tag:String):ElementNode\n\t{\n\t\treturn new ElementNode(tag, []);\n\t}\n\n\tpublic static function text(tag:String, text:String):ElementNode\n\t{\n\t\treturn new ElementNode(tag, [new TextNode(text)]);\n\t}\n\n\tpublic var tag(default, null):String;\n\tpublic var children(default, null):Array<Node>;\n\tpublic var attributes(default, null):Map<String, String>;\n\n\tpublic function new(tag:String, children:Array<Node>)\n\t{\n\t\tthis.tag = tag;\n\t\tthis.children = children;\n\t\tthis.attributes = new Map();\n\t}\n\n\tinline public function isEmpty():Bool\n\t{\n\t\treturn children == null;\n\t}\n\n\tpublic function accept(visitor:NodeVisitor):Void\n\t{\n\t\tif (visitor.visitElementBefore(this))\n\t\t{\n\t\t\tfor (child in children) child.accept(visitor);\n\t\t\tvisitor.visitElementAfter(this);\n\t\t}\n\t}\n}\n\n/**\n\tA plain text element.\n**/\nclass TextNode implements Node\n{\n\tpublic var text(default, null):String;\n\n\tpublic function new(text:String) this.text = text;\n\n\tpublic function accept(visitor:NodeVisitor):Void\n\t{\n\t\tvisitor.visitText(this);\n\t}\n}\n","package markdown;\n\nimport markdown.AST;\nimport Markdown;\nusing StringTools;\nusing Lambda;\n\n/**\n\tMaintains the internal state needed to parse a series of lines into blocks\n\tof markdown suitable for further inline parsing.\n**/\nclass BlockParser\n{\n\t// the lines being parsed\n\tpublic var lines(default, null):Array<String>;\n\n\t// The markdown document this parser is parsing.\n\tpublic var document(default, null):Document;\n\n\t// Index of the current line.\n\tpublic var pos(default, null):Int;\n\n\tpublic function new(lines:Array<String>, document:Document)\n\t{\n\t\tthis.lines = lines;\n\t\tthis.document = document;\n\t\tthis.pos = 0;\n\t}\n\n\t// Gets the current line.\n\tpublic var current(get, never):String;\n\tinline function get_current() return lines[pos];\n\n\t// Gets the line after the current one or `null` if there is none.\n\tpublic var next(get, never):String;\n\tfunction get_next()\n\t{\n\t\t// Don't read past the end.\n\t\tif (pos >= lines.length - 1) return null;\n\t\treturn lines[pos + 1];\n\t}\n\n\t// Move to the next line.\n\tpublic function advance():Void pos++;\n\n\t// Are we there yet?\n\tpublic var isDone(get, never):Bool;\n\tinline function get_isDone() return pos >= lines.length;\n\n\t// Gets whether or not the current line matches the given pattern.\n\tpublic function matches(ereg:EReg):Bool\n\t{\n\t\tif (isDone) return false;\n\t\treturn ereg.match(current);\n\t}\n\n\t// Gets whether or not the current line matches the given pattern.\n\tpublic function matchesNext(ereg:EReg):Bool\n\t{\n\t\tif (next == null) return false;\n\t\treturn ereg.match(next);\n\t}\n}\n\nclass BlockSyntax\n{\n\t/**\n\t\tThe line contains only whitespace or is empty.\n\t**/\n\tstatic var RE_EMPTY = new EReg('^([ \\\\t]*)$', '');\n\n\t/**\n\t\tA series of `=` or `-` (on the next line) define setext-style headers.\n\t**/\n\tstatic var RE_SETEXT = new EReg('^((=+)|(-+))$', '');\n\n\t/**\n\t\tLeading (and trailing) `#` define atx-style headers.\n\t**/\n\tstatic var RE_HEADER = new EReg('^(#{1,6})(.*?)#*$', '');\n\n\t/**\n\t\tThe line starts with `>` with one optional space after.\n\t**/\n\tstatic var RE_BLOCKQUOTE = new EReg('^[ ]{0,3}>[ ]?(.*)$', '');\n\n\t/**\n\t\tA line indented four spaces. Used for code blocks and lists.\n\t**/\n\tstatic var RE_INDENT = new EReg('^(?:    |\\t)(.*)$', '');\n\n\t/**\n\t\tGitHub style triple quoted code block.\n\t**/\n\tstatic var RE_CODE = new EReg('^```(\\\\w*)\\\\s*$', '');\n\n\t/**\n\t\tThree or more hyphens, asterisks or underscores by themselves. Note that\n\t\ta line like `----` is valid as both HR and SETEXT. In case of a tie,\n\t\tSETEXT should win.\n\t**/\n\tstatic var RE_HR = new EReg('^[ ]{0,3}((-+[ ]{0,2}){3,}|(_+[ ]{0,2}){3,}|(\\\\*+[ ]{0,2}){3,})$', '');\n\n\t/**\n\t\tReally hacky way to detect block-level embedded HTML. Just looks for\n\t\t\"<somename\".\n\t**/\n\tstatic var RE_HTML = new EReg('^<[ ]*\\\\w+[ >]', '');\n\n\t/**\n\t\tA line starting with one of these markers: `-`, `*`, `+`. May have up to\n\t\tthree leading spaces before the marker and any number of spaces or tabs\n\t\tafter.\n\t**/\n\tstatic var RE_UL = new EReg('^[ ]{0,3}[*+-][ \\\\t]+(.*)$', '');\n\t\n\t/**\n\t\tA line starting with a number like `123.`. May have up to three leading\n\t\tspaces before the marker and any number of spaces or tabs after.\n\t**/\n\tstatic var RE_OL = new EReg('^[ ]{0,3}\\\\d+\\\\.[ \\\\t]+(.*)$', '');\n\n\t/**\n\t\tGets the collection of built-in block parsers. To turn a series of lines\n\t\tinto blocks, each of these will be tried in turn. Order matters here.\n\t**/\n\tpublic static var syntaxes(get, null):Array<BlockSyntax>;\n\n\tstatic function get_syntaxes():Array<BlockSyntax>\n\t{\n\t\tif (syntaxes == null)\n\t\t{\n\t\t\tsyntaxes = [\n\t\t\t\tnew EmptyBlockSyntax(),\n\t\t\t\tnew BlockHtmlSyntax(),\n\t\t\t\tnew SetextHeaderSyntax(),\n\t\t\t\tnew HeaderSyntax(),\n\t\t\t\tnew CodeBlockSyntax(),\n\t\t\t\tnew GitHubCodeBlockSyntax(),\n\t\t\t\tnew BlockquoteSyntax(),\n\t\t\t\tnew HorizontalRuleSyntax(),\n\t\t\t\tnew UnorderedListSyntax(),\n\t\t\t\tnew OrderedListSyntax(),\n\t\t\t\tnew TableSyntax(),\n\t\t\t\tnew ParagraphSyntax()\n\t\t\t];\n\t\t}\n\t\treturn syntaxes;\n\t}\n\n\t/**\n\t\tGets whether or not [parser]'s current line should end the \n\t\tprevious block.\n\t**/\n\tpublic static function isAtBlockEnd(parser:BlockParser):Bool\n\t{\n\t\tif (parser.isDone) return true;\n\t\tfor (syntax in syntaxes)\n\t\t{\n\t\t\tif (syntax.canParse(parser) && syntax.canEndBlock) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function new() {}\n\n\t/**\n\t\tGets the regex used to identify the beginning of this block, if any.\n\t**/\n\tpublic var pattern(get, never):EReg;\n\tfunction get_pattern():EReg\n\t{\n\t\treturn null;\n\t}\n\n\tpublic var canEndBlock(get, never):Bool;\n\tfunction get_canEndBlock():Bool\n\t{\n\t\treturn true;\n\t}\n\n\tpublic function canParse(parser:BlockParser):Bool\n\t{\n\t\treturn pattern.match(parser.current);\n\t}\n\n\tpublic function parse(parser:BlockParser):Node\n\t{\n\t\treturn null;\n\t}\n\n\tpublic function parseChildLines(parser:BlockParser):Array<String>\n\t{\n\t\tvar childLines = [];\n\n\t\twhile (!parser.isDone)\n\t\t{\n\t\t\tif (!pattern.match(parser.current)) break;\n\t\t\tchildLines.push(pattern.matched(1));\n\t\t\tparser.advance();\n\t\t}\n\n\t\treturn childLines;\n\t}\n}\n\nclass EmptyBlockSyntax extends BlockSyntax\n{\n\tpublic function new() { super(); }\n\n\toverride function get_pattern():EReg\n\t{\n\t\treturn BlockSyntax.RE_EMPTY;\n\t}\n\n\toverride public function parse(parser:BlockParser)\n\t{\n\t\tparser.advance();\n\t\t// Don't actually emit anything.\n\t\treturn null;\n\t}\n}\n\n/**\n\tParses setext-style headers.\n**/\nclass SetextHeaderSyntax extends BlockSyntax\n{\n\tpublic function new() { super(); }\n\n\toverride public function canParse(parser:BlockParser)\n\t{\n\t\t// Note: matches *next* line, not the current one. We're looking for the\n\t\t\t// underlining after this line.\n\t\t\treturn parser.matchesNext(BlockSyntax.RE_SETEXT);\n\t}\n\n\toverride public function parse(parser:BlockParser)\n\t{\n\t\tvar re = BlockSyntax.RE_SETEXT;\n\t\tre.match(parser.next);\n\n\t\tvar tag = (re.matched(1).charAt(0) == '=') ? 'h1' : 'h2';\n\t\tvar contents = parser.document.parseInline(parser.current);\n\t\tparser.advance();\n\t\tparser.advance();\n\t\treturn new ElementNode(tag, contents);\n\t}\n}\n\n/**\n\tParses atx-style headers: `## Header ##`.\n**/\nclass HeaderSyntax extends BlockSyntax\n{\n\tpublic function new() { super(); }\n\n\toverride function get_pattern():EReg\n\t{\n\t\treturn BlockSyntax.RE_HEADER;\n\t}\n\n\toverride public function parse(parser:BlockParser)\n\t{\n\t\tpattern.match(parser.current);\n\t\tparser.advance();\n\t\tvar level = pattern.matched(1).length;\n\t\tvar contents = parser.document.parseInline(pattern.matched(2).trim());\n\t\treturn new ElementNode('h$level', contents);\n\t}\n}\n\n\n// Parses email-style blockquotes: `> quote`.\nclass BlockquoteSyntax extends BlockSyntax\n{\n\toverride function get_pattern():EReg\n\t{\n\t\treturn BlockSyntax.RE_BLOCKQUOTE;\n\t}\n\n\toverride public function parseChildLines(parser:BlockParser):Array<String>\n\t{\n\t\tvar childLines = [];\n\n\t\twhile (!parser.isDone)\n\t\t{\n\t\t\tif (pattern.match(parser.current))\n\t\t\t{\n\t\t\t\tchildLines.push(pattern.matched(1));\n\t\t\t\tparser.advance();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// If there's a blockquote, then a newline, then a blockquote, keep the\n\t\t\t\t// blockquotes together.\n\t\t\t\tvar nextMatch = parser.next != null ? pattern.match(parser.next) : false;\n\n\t\t\t\tif (parser.current.trim() == '' && nextMatch)\n\t\t\t\t{\n\t\t\t\t\tchildLines.push('');\n\t\t\t\t\tchildLines.push(pattern.matched(1));\n\t\t\t\t\tparser.advance();\n\t\t\t\t\tparser.advance();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn childLines;\n\t}\n\n\toverride public function parse(parser:BlockParser):Node\n\t{\n\t\tvar childLines = parseChildLines(parser);\n\n\t\t// Recursively parse the contents of the blockquote.\n\t\tvar children = parser.document.parseLines(childLines);\n\n\t\treturn new ElementNode('blockquote', children);\n\t}\n}\n\n// Parses preformatted code blocks that are indented four spaces.\nclass CodeBlockSyntax extends BlockSyntax\n{\n\toverride function get_pattern():EReg\n\t{\n\t\treturn BlockSyntax.RE_INDENT;\n\t}\n\n\toverride public function parseChildLines(parser:BlockParser):Array<String>\n\t{\n\t\tvar childLines = [];\n\n\t\twhile (!parser.isDone)\n\t\t{\n\t\t\tif (pattern.match(parser.current))\n\t\t\t{\n\t\t\t\tchildLines.push(pattern.matched(1));\n\t\t\t\tparser.advance();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// If there's a codeblock, then a newline, then a codeblock, keep the\n\t\t\t\t// code blocks together.\n\t\t\t\tvar nextMatch = parser.next != null ? pattern.match(parser.next) : false;\n\n\t\t\t\tif (parser.current.trim() == '' && nextMatch)\n\t\t\t\t{\n\t\t\t\t\tchildLines.push('');\n\t\t\t\t\tchildLines.push(pattern.matched(1));\n\t\t\t\t\tparser.advance();\n\t\t\t\t\tparser.advance();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn childLines;\n\t}\n\n\toverride public function parse(parser:BlockParser):Node\n\t{\n\t\tvar childLines = parseChildLines(parser);\n\n\t\t// The Markdown tests expect a trailing newline.\n\t\tchildLines.push('');\n\n\t\t// Escape the code.\n\t\tvar escaped = childLines.join('\\n').htmlEscape();\n\n\t\treturn new ElementNode('pre', [ElementNode.text('code', escaped)]);\n\t}\n}\n\n// Parses preformatted code blocks between two ``` sequences.\nclass GitHubCodeBlockSyntax extends BlockSyntax\n{\n\toverride function get_pattern():EReg\n\t{\n\t\treturn BlockSyntax.RE_CODE;\n\t}\n\n\toverride public function parseChildLines(parser:BlockParser):Array<String>\n\t{\n\t\tvar childLines = [];\n\t\tparser.advance();\n\t\t\n\t\twhile (!parser.isDone)\n\t\t{\n\t\t\tif (!pattern.match(parser.current)) {\n\t\t\t\tchildLines.push(parser.current);\n\t\t\t\tparser.advance();\n\t\t\t} else {\n\t\t\t\tparser.advance();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn childLines;\n\t}\n\n\toverride public function parse(parser:BlockParser):Node\n\t{\n\t\t// Get the syntax identifier, if there is one.\n\t\t// pattern.match(parser.current);\n\t\tvar syntax = pattern.matched(1);\n\t\tvar childLines = parseChildLines(parser);\n\t\t\n\t\tvar code = ElementNode.text('code', childLines.join('\\n').htmlEscape());\n\t\tif (syntax != null && syntax.length > 0) {\n\t\t\tcode.attributes.set('class', 'prettyprint '+syntax);\n\t\t}\n\t\treturn new ElementNode('pre', [code]);\n\t}\n}\n\n// Parses horizontal rules like `---`, `_ _ _`, `*\t*\t*`, etc.\nclass HorizontalRuleSyntax extends BlockSyntax\n{\n\toverride function get_pattern():EReg\n\t{\n\t\treturn BlockSyntax.RE_HR;\n\t}\n\n\toverride public function parse(parser:BlockParser):Node\n\t{\n\t\tparser.advance();\n\t\treturn ElementNode.empty('hr');\n\t}\n}\n\n// Parses inline HTML at the block level. This differs from other markdown\n// implementations in several ways:\n//\n// 1.\tThis one is way way WAY simpler.\n// 2.\tAll HTML tags at the block level will be treated as blocks. If you\n//\t\t start a paragraph with `<em>`, it will not wrap it in a `<p>` for you.\n//\t\t As soon as it sees something like HTML, it stops mucking with it until\n//\t\t it hits the next block.\n// 3.\tAbsolutely no HTML parsing or validation is done. We're a markdown\n//\t\t parser not an HTML parser!\nclass BlockHtmlSyntax extends BlockSyntax\n{\n\toverride function get_pattern():EReg\n\t{\n\t\treturn BlockSyntax.RE_HTML;\n\t}\n\n\toverride function get_canEndBlock() return false;\n\n\toverride public function parse(parser:BlockParser):Node\n\t{\n\t\tvar childLines = [];\n\n\t\t// Eat until we hit a blank line.\n\t\twhile (!parser.isDone && !parser.matches(BlockSyntax.RE_EMPTY))\n\t\t{\n\t\t\tchildLines.push(parser.current);\n\t\t\tparser.advance();\n\t\t}\n\n\t\treturn new TextNode(childLines.join('\\n'));\n\t}\n}\n\nclass ListItem\n{\n\tpublic var forceBlock:Bool = false;\n\tpublic var lines(default, null):Array<String>;\n\n\tpublic function new(lines:Array<String>)\n\t{\n\t\tthis.lines = lines;\n\t}\n}\n\n// Parses paragraphs of regular text.\nclass ParagraphSyntax extends BlockSyntax\n{\n\toverride function get_canEndBlock() return false;\n\n\toverride public function canParse(parser:BlockParser):Bool\n\t{\n\t\treturn true;\n\t}\n\n\toverride public function parse(parser:BlockParser):Node\n\t{\n\t\tvar childLines = [];\n\n\t\t// Eat until we hit something that ends a paragraph.\n\t\twhile (!BlockSyntax.isAtBlockEnd(parser))\n\t\t{\n\t\t\tchildLines.push(StringTools.ltrim(parser.current));\n\t\t\tparser.advance();\n\t\t}\n\n\t\tvar contents = parser.document.parseInline(childLines.join('\\n'));\n\t\treturn new ElementNode('p', contents);\n\t}\n}\n\n// Base class for both ordered and unordered lists.\nclass ListSyntax extends BlockSyntax\n{\n\toverride function get_canEndBlock()\n\t{\n\t\treturn false;\n\t}\n\n\tpublic var listTag(default, null):String;\n\n\tpublic function new(listTag:String)\n\t{\n\t\tsuper();\n\t\tthis.listTag = listTag;\n\t}\n\n\toverride public function parse(parser:BlockParser):Node\n\t{\n\t\tvar items = [];\n\t\tvar childLines = [];\n\n\t\tfunction endItem()\n\t\t{\n\t\t\tif (childLines.length > 0)\n\t\t\t{\n\t\t\t\titems.push(new ListItem(childLines));\n\t\t\t\tchildLines = [];\n\t\t\t}\n\t\t}\n\n\t\tvar match:EReg;\n\t\tfunction tryMatch(pattern:EReg) {\n\t\t\tmatch = pattern;\n\t\t\treturn pattern.match(parser.current);\n\t\t}\n\n\t\twhile (!parser.isDone)\n\t\t{\n\t\t\tif (tryMatch(BlockSyntax.RE_EMPTY))\n\t\t\t{\n\t\t\t\t// Add a blank line to the current list item.\n\t\t\t\tchildLines.push('');\n\t\t\t}\n\t\t\telse if (tryMatch(BlockSyntax.RE_UL) || tryMatch(BlockSyntax.RE_OL))\n\t\t\t{\n\t\t\t\t// End the current list item and start a new one.\n\t\t\t\tendItem();\n\t\t\t\tchildLines.push(match.matched(1));\n\t\t\t}\n\t\t\telse if (tryMatch(BlockSyntax.RE_INDENT))\n\t\t\t{\n\t\t\t\t// Strip off indent and add to current item.\n\t\t\t\tchildLines.push(match.matched(1));\n\t\t\t}\n\t\t\telse if (BlockSyntax.isAtBlockEnd(parser))\n\t\t\t{\n\t\t\t\t// Done with the list.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Anything else is paragraph text or other stuff that can be in a list\n\t\t\t\t// item. However, if the previous item is a blank line, this means we're\n\t\t\t\t// done with the list and are starting a new top-level paragraph.\n\t\t\t\tif ((childLines.length > 0) && (childLines[childLines.length-1] == '')) break;\n\t\t\t\tchildLines.push(parser.current);\n\t\t\t}\n\t\t\tparser.advance();\n\t\t}\n\n\t\tendItem();\n\n\t\t// Markdown, because it hates us, specifies two kinds of list items. If you\n\t\t// have a list like:\n\t\t//\n\t\t// * one\n\t\t// * two\n\t\t//\n\t\t// Then it will insert the conents of the lines directly in the <li>, like:\n\t\t// <ul>\n\t\t//\t <li>one</li>\n\t\t//\t <li>two</li>\n\t\t// <ul>\n\t\t//\n\t\t// If, however, there are blank lines between the items, each is wrapped in\n\t\t// paragraphs:\n\t\t//\n\t\t// * one\n\t\t//\n\t\t// * two\n\t\t//\n\t\t// <ul>\n\t\t//\t <li><p>one</p></li>\n\t\t//\t <li><p>two</p></li>\n\t\t// <ul>\n\t\t//\n\t\t// In other words, sometimes we parse the contents of a list item like a\n\t\t// block, and sometimes line an inline. The rules our parser implements are:\n\t\t//\n\t\t// - If it has more than one line, it's a block.\n\t\t// - If the line matches any block parser (BLOCKQUOTE, HEADER, HR, INDENT,\n\t\t//\t UL, OL) it's a block. (This is for cases like \"* > quote\".)\n\t\t// - If there was a blank line between this item and the previous one, it's\n\t\t//\t a block.\n\t\t// - If there was a blank line between this item and the next one, it's a\n\t\t//\t block.\n\t\t// - Otherwise, parse it as an inline.\n\n\t\t// Remove any trailing empty lines and note which items are separated by\n\t\t// empty lines. Do this before seeing which items are single-line so that\n\t\t// trailing empty lines on the last item don't force it into being a block.\n\t\tfor (i in 0...items.length)\n\t\t{\n\t\t\tvar len = items[i].lines.length;\n\t\t\tfor (jj in 1...len+1)\n\t\t\t{\n\t\t\t\tvar j = len - jj;\n\t\t\t\tif (BlockSyntax.RE_EMPTY.match(items[i].lines[j]))\n\t\t\t\t{\n\t\t\t\t\t// Found an empty line. Item and one after it are blocks.\n\t\t\t\t\tif (i < items.length - 1)\n\t\t\t\t\t{\n\t\t\t\t\t\titems[i].forceBlock = true;\n\t\t\t\t\t\titems[i + 1].forceBlock = true;\n\t\t\t\t\t}\n\t\t\t\t\titems[i].lines.pop();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Convert the list items to Nodes.\n\t\tvar itemNodes:Array<Node> = [];\n\t\tfor (item in items)\n\t\t{\n\t\t\tvar blockItem = item.forceBlock || (item.lines.length > 1);\n\n\t\t\t// See if it matches some block parser.\n\t\t\tvar blocksInList = [\n\t\t\t\tBlockSyntax.RE_BLOCKQUOTE,\n\t\t\t\tBlockSyntax.RE_HEADER,\n\t\t\t\tBlockSyntax.RE_HR,\n\t\t\t\tBlockSyntax.RE_INDENT,\n\t\t\t\tBlockSyntax.RE_UL,\n\t\t\t\tBlockSyntax.RE_OL\n\t\t\t];\n\n\t\t\tif (!blockItem)\n\t\t\t{\n\t\t\t\tfor (pattern in blocksInList)\n\t\t\t\t{\n\t\t\t\t\tif (pattern.match(item.lines[0]))\n\t\t\t\t\t{\n\t\t\t\t\t\tblockItem = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Parse the item as a block or inline.\n\t\t\tif (blockItem)\n\t\t\t{\n\t\t\t\t// Block list item.\n\t\t\t\tvar children = parser.document.parseLines(item.lines);\n\n\t\t\t\t// if we have a single p child we might have been forced into block\n\t\t\t\t// mode by line breaks. if not forceBlock (empty line before/after)\n\t\t\t\t// we can use text of p as li child <li><p>foo</p></li> -> <li>foo</li>\n\t\t\t\tif (!item.forceBlock && children.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (Std.is(children[0], ElementNode))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar node:ElementNode = cast children[0];\n\t\t\t\t\t\tif (node.tag == 'p') children = node.children;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titemNodes.push(new ElementNode('li', children));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Raw list item.\n\t\t\t\tvar contents = parser.document.parseInline(item.lines[0]);\n\t\t\t\titemNodes.push(new ElementNode('li', contents));\n\t\t\t}\n\t\t}\n\n\t\treturn new ElementNode(listTag, itemNodes);\n\t}\n}\n\n// Parses unordered lists.\nclass UnorderedListSyntax extends ListSyntax\n{\n\toverride function get_pattern():EReg\n\t{\n\t\treturn BlockSyntax.RE_UL;\n\t}\n\n\tpublic function new()\n\t{\n\t\tsuper('ul');\n\t}\n}\n\n// Parses ordered lists.\nclass OrderedListSyntax extends ListSyntax\n{\n\toverride function get_pattern():EReg\n\t{\n\t\treturn BlockSyntax.RE_OL;\n\t}\n\n\tpublic function new()\n\t{\n\t\tsuper('ol');\n\t}\n}\n\nclass TableSyntax extends BlockSyntax\n{\n\tstatic var TABLE_PATTERN = new EReg('^(.+? +:?\\\\|:? +)+(.+)$', '');\n\tstatic var CELL_PATTERN = new EReg('(\\\\|)?([^\\\\|]+)(\\\\|)?', 'g');\n\n\tpublic function new()\n\t{\n\t\tsuper();\n\t}\n\n\toverride function get_pattern():EReg\n\t{\n\t\treturn TABLE_PATTERN;\n\t}\n\n\toverride function get_canEndBlock()\n\t{\n\t\treturn false;\n\t}\n  \n\toverride public function parse(parser:BlockParser):Node\n\t{\n\t\tvar lines = [];\n\n\t\twhile (!parser.isDone && parser.matches(TABLE_PATTERN))\n\t\t{\n\t\t\tlines.push(parser.current);\n\t\t\tparser.advance();\n\t\t}\n\t\t\n\t\tvar heads:Array<Node> = [];\n\t\tvar rows:Array<Node> = [];\n\t\tvar align = [];\n\n\t\tvar headLine = lines.shift();\n\t\tvar alignLine = lines.shift();\n\n\t\t// get alignment from separator line\n\t\tvar aligns = [];\n\t\tif (alignLine != null) {\n\t\t\tCELL_PATTERN.map(alignLine, function(e){\n\t\t\t\tvar text = e.matched(2);\n\t\t\t\tvar align = text.charAt(0) == ':' \n\t\t\t\t\t? text.charAt(text.length - 1) == ':' ? 'center' : 'left'\n\t\t\t\t\t: text.charAt(text.length - 1) == ':' ? 'right' : 'left';\n\t\t\t\taligns.push(align);\n\t\t\t\treturn '';\n\t\t\t});\n\t\t}\n\t\t\n\t\t// create thead\n\t\tvar index = 0;\n\t\tCELL_PATTERN.map(headLine, function(e){\n\t\t\tvar text = StringTools.trim(e.matched(2));\n\t\t\tvar cell = new ElementNode('th', parser.document.parseInline(text));\n\t\t\tif (aligns[index] != 'left') cell.attributes.set('align', aligns[index]);\n\t\t\theads.push(cell);\n\t\t\tindex += 1;\n\t\t\treturn '';\n\t\t});\n\n\t\tfor (line in lines)\n\t\t{\n\t\t\tvar cols:Array<Node> = [];\n\t\t\trows.push(new ElementNode('tr', cols));\n\n\t\t\tvar index = 0;\n\t\t\tCELL_PATTERN.map(line, function(e){\n\t\t\t\tvar text = StringTools.trim(e.matched(2));\n\t\t\t\tvar cell = new ElementNode('td', parser.document.parseInline(text));\n\t\t\t\tif (aligns[index] != 'left') cell.attributes.set('align', aligns[index]);\n\t\t\t\tcols.push(cell);\n\t\t\t\tindex += 1;\n\t\t\t\treturn '';\n\t\t\t});\n\t\t}\n\n\t\treturn new ElementNode('table', [\n\t\t\tnew ElementNode('thead', heads), \n\t\t\tnew ElementNode('tbody', rows)\n\t\t]);\n\t}\n}\n","package markdown;\n\nimport markdown.AST;\n\n/**\n\tTranslates a parsed AST to HTML.\n**/\nclass HtmlRenderer implements NodeVisitor\n{\n\tstatic var BLOCK_TAGS = new EReg('blockquote|h1|h2|h3|h4|h5|h6|hr|p|pre', '');\n\n\tvar buffer:StringBuf;\n\n\tpublic function new() {}\n\n\tpublic function render(nodes:Array<Node>):String\n\t{\n\t\tbuffer = new StringBuf();\n\t\tfor (node in nodes) node.accept(this);\n\t\treturn buffer.toString();\n\t}\n\n\tpublic function visitText(text:TextNode):Void\n\t{\n\t\tbuffer.add(text.text);\n\t}\n\n\tpublic function visitElementBefore(element:ElementNode):Bool\n\t{\n\t\t// Hackish. Separate block-level elements with newlines.\n\t\tif (buffer.toString() != \"\" && BLOCK_TAGS.match(element.tag))\n\t\t{\n\t\t\tbuffer.add('\\n');\n\t\t}\n\n\t\tbuffer.add('<${element.tag}');\n\n\t\t// Sort the keys so that we generate stable output.\n\t\t// TODO(rnystrom): This assumes keys returns a fresh mutable\n\t\t// collection.\n\t\tvar attributeNames = [for (k in element.attributes.keys()) k];\n\t\tattributeNames.sort(sortAttributes);\n\t\tfor (name in attributeNames)\n\t\t{\n\t\t\tbuffer.add(' $name=\"${element.attributes.get(name)}\"');\n\t\t}\n\n\t\tif (element.isEmpty())\n\t\t{\n\t\t\t// Empty element like <hr/>.\n\t\t\tbuffer.add(' />');\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbuffer.add('>');\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function visitElementAfter(element:ElementNode):Void\n\t{\n\t\tbuffer.add('</${element.tag}>');\n\t}\n\n\tstatic var attributeOrder = ['src', 'alt'];\n\n\tstatic function sortAttributes(a:String, b:String)\n\t{\n\t\tvar ia = attributeOrder.indexOf(a);\n\t\tvar ib = attributeOrder.indexOf(a);\n\t\tif (ia > -1 && ib > -1) return ia - ib;\n\t\treturn Reflect.compare(a, b);\n\t}\n}\n","package markdown;\n\nimport markdown.AST;\nimport Markdown;\nusing StringTools;\nusing Lambda;\n\n/**\n\tMaintains the internal state needed to parse inline span elements in\n\tmarkdown.\n**/\nclass InlineParser\n{\n\tstatic var defaultSyntaxes = [\n\t\t// This first regexp matches plain text to accelerate parsing.\tIt must\n\t\t// be written so that it does not match any prefix of any following\n\t\t// syntax.\tMost markdown is plain text, so it is faster to match one\n\t\t// regexp per 'word' rather than fail to match all the following regexps\n\t\t// at each non-syntax character position.\tIt is much more important\n\t\t// that the regexp is fast than complete (for example, adding grouping\n\t\t// is likely to slow the regexp down enough to negate its benefit).\n\t\t// Since it is purely for optimization, it can be removed for debugging.\n\n\t\t// TODO(amouravski): this regex will glom up any custom syntaxes unless\n\t\t// they're at the beginning.\n\t\tnew AutolinkSyntaxWithoutBrackets(),\n\t\tnew TextSyntax(' {2,}\\n', '<br />\\n'),\n\t\tnew TextSyntax('\\\\s*[A-Za-z0-9]+'),\n\n\t\t// The real syntaxes.\n\n\t\tnew AutolinkSyntax(),\n\t\tnew LinkSyntax(),\n\t\tnew ImgSyntax(),\n\n\t\t// \"*\" surrounded by spaces is left alone.\n\t\tnew TextSyntax(' \\\\* '),\n\t\t// \"_\" surrounded by spaces is left alone.\n\t\tnew TextSyntax(' _ '),\n\t\t// Leave already-encoded HTML entities alone. Ensures we don't turn\n\t\t// \"&amp;\" into \"&amp;amp;\"\n\t\tnew TextSyntax('&[#a-zA-Z0-9]*;'),\n\t\t// Encode \"&\".\n\t\tnew TextSyntax('&', '&amp;'),\n\t\t// Leave HTML as is.\n\t\tnew TextSyntax('</?\\\\w+.*?>'),\n\t\t// Encode \"<\". (Why not encode \">\" too? Gruber is toying with us.)\n\t\tnew TextSyntax('<', '&lt;'),\n\t\t// Parse \"**strong**\" tags.\n\t\tnew TagSyntax('\\\\*\\\\*', 'strong'),\n\t\t// Parse \"__strong__\" tags.\n\t\tnew TagSyntax('__', 'strong'),\n\t\t// Parse \"*emphasis*\" tags.\n\t\tnew TagSyntax('\\\\*', 'em'),\n\t\t// Parse \"_emphasis_\" tags.\n\t\tnew TagSyntax('\\\\b_', 'em', '_\\\\b'),\n\t\t// Parse inline code within double backticks: \"``code``\".\n\t\tnew CodeSyntax('``\\\\s?((?:.|\\\\n)*?)\\\\s?``'),\n\t\t// Parse inline code within backticks: \"`code`\".\n\t\tnew CodeSyntax('`([^`]*)`')\n\t\t// We will add the LinkSyntax once we know about the specific link resolver.\n\t];\n\n\t// The string of markdown being parsed.\n\tpublic var source(default, null):String;\n\n\t// The markdown document this parser is parsing.\n\tpublic var document(default, null):Document;\n\n\tpublic var syntaxes(default, null):Array<InlineSyntax>;\n\n\t// The current read position.\n\tpublic var pos(default, null):Int = 0;\n\n\t// Starting position of the last unconsumed text.\n\tpublic var start:Int = 0;\n\n\tpublic var stack(default, null):Array<TagState>;\n\n\tpublic function new(source:String, document:Document)\n\t{\n\t\tthis.source = source;\n\t\tthis.document = document;\n\t\tstack = [];\n\n\t\t// User specified syntaxes will be the first syntaxes to be evaluated.\n\t\tif (document.inlineSyntaxes != null)\n\t\t{\n\t\t\tsyntaxes = [];\n\t\t\tfor (syntax in document.inlineSyntaxes)\n\t\t\t\tsyntaxes.push(syntax);\n\t\t\tfor (syntax in defaultSyntaxes)\n\t\t\t\tsyntaxes.push(syntax);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsyntaxes = defaultSyntaxes;\n\t\t}\n\n\t\t// Custom link resolver goes after the generic text syntax.\n\t\tsyntaxes.insert(1, new LinkSyntax(document.linkResolver));\n\t}\n\t\n\tpublic function parse():Array<Node>\n\t{\n\t\t// Make a fake top tag to hold the results.\n\t\tstack.push(new TagState(0, 0, null));\n\n\t\twhile (!isDone)\n\t\t{\n\t\t\tvar matched = false;\n\n\t\t\t// See if any of the current tags on the stack match. We don't allow tags\n\t\t\t// of the same kind to nest, so this takes priority over other possible // matches.\n\t\t\tfor (i in 1...stack.length)\n\t\t\t{\n\t\t\t\tif (stack[stack.length - i].tryMatch(this))\n\t\t\t\t{\n\t\t\t\t\tmatched = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (matched) continue;\n\n\t\t\t// See if the current text matches any defined markdown syntax.\n\t\t\tfor (syntax in syntaxes)\n\t\t\t{\n\t\t\t\tif (syntax.tryMatch(this))\n\t\t\t\t{\n\t\t\t\t\tmatched = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (matched) continue;\n\n\t\t\t// If we got here, it's just text.\n\t\t\tadvanceBy(1);\n\t\t}\n\n\t\t// Unwind any unmatched tags and get the results.\n\t\treturn stack[0].close(this);\n\t}\n\n\tpublic function writeText()\n\t{\n\t\twriteTextRange(start, pos);\n\t\tstart = pos;\n\t}\n\n\tpublic function writeTextRange(start:Int, end:Int)\n\t{\n\t\tif (end > start)\n\t\t{\n\t\t\tvar text = source.substring(start, end);\n\t\t\tvar nodes = stack[stack.length - 1].children;\n\n\t\t\t// If the previous node is text too, just append.\n\t\t\tif ((nodes.length > 0) && (Std.is(nodes[nodes.length - 1], TextNode)))\n\t\t\t{\n\t\t\t\tvar lastNode:TextNode = cast nodes[nodes.length - 1];\n\t\t\t\tvar newNode = createText('${lastNode.text}$text');\n\t\t\t\tnodes[nodes.length - 1] = newNode;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnodes.push(createText(text));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function createText(text:String)\n\t{\n\t\treturn new TextNode(unescape(text));\n\t}\n\n\tpublic function addNode(node:Node)\n\t{\n\t\tstack[stack.length - 1].children.push(node);\n\t}\n\n\t// TODO(rnystrom): Only need this because RegExp doesn't let you start\n\t// searching from a given offset.\n\tpublic var currentSource(get, never):String;\n\tfunction get_currentSource() return source.substring(pos, source.length);\n\n\tpublic var isDone(get, never):Bool;\n\tfunction get_isDone() return pos == source.length;\n\n\tpublic function advanceBy(length:Int)\n\t{\n\t\tpos += length;\n\t}\n\n\tpublic function consume(length:Int)\n\t{\n\t\tpos += length;\n\t\tstart = pos;\n\t}\n\n\tpublic function unescape(text:String):String\n\t{\n  \t\ttext = ~/\\\\([\\\\`*_{}[\\]()#+-.!])/g.replace(text, '$1');\n\t\ttext = StringTools.replace(text, '\\t', '    ');\n\t\treturn text;\n\t}\n}\n\n/**\n\tRepresents one kind of markdown tag that can be parsed.\n**/\nclass InlineSyntax\n{\n\tvar pattern:EReg;\n\n\tpublic function new(pattern:String)\n\t{\n\t\tthis.pattern = new EReg(pattern, 'm');\n\t}\n\n\tpublic function tryMatch(parser:InlineParser):Bool\n\t{\n\t\tif (pattern.match(parser.currentSource) && (pattern.matchedPos().pos == 0))\n\t\t{\n\t\t\t// Write any existing plain text up to this point.\n\t\t\tparser.writeText();\n\n\t\t\tif (onMatch(parser))\n\t\t\t{\n\t\t\t\tparser.consume(pattern.matched(0).length);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction onMatch(parser:InlineParser):Bool\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n\tMatches stuff that should just be passed through as straight text.\n**/\nclass TextSyntax extends InlineSyntax\n{\n\tvar substitute:String;\n\n\tpublic function new(pattern:String, ?substitute:String)\n\t{\n\t\tsuper(pattern);\n\t\tthis.substitute = substitute;\n\t}\n\n\toverride function onMatch(parser:InlineParser):Bool\n\t{\n\t\tif (substitute == null)\n\t\t{\n\t\t\t// Just use the original matched text.\n\t\t\tparser.advanceBy(pattern.matched(0).length);\n\t\t\treturn false;\n\t\t}\n\n\t\t// Insert the substitution.\n\t\tparser.addNode(parser.createText(substitute));\n\t\treturn true;\n\t}\n}\n\n/**\n\tMatches autolinks like `<http://foo.com>`.\n**/\nclass AutolinkSyntax extends InlineSyntax\n{\n\tpublic function new()\n\t{\n\t\t// TODO(rnystrom): Make case insensitive.\n\t\tsuper('<((http|https|ftp)://[^>]*)>');\n\t}\n\n\toverride function onMatch(parser:InlineParser):Bool\n\t{\n\t\tvar url = pattern.matched(1);\n\n\t\tvar anchor = ElementNode.text('a', url.htmlEscape());\n\t\tanchor.attributes.set('href', url);\n\t\tparser.addNode(anchor);\n\n\t\treturn true;\n\t}\n}\n\n/**\n\tMatches autolinks like `http://foo.com`.\n**/\nclass AutolinkSyntaxWithoutBrackets extends InlineSyntax\n{\n\tpublic function new()\n\t{\n\t\t// TODO(rnystrom): Make case insensitive.\n\t\tsuper('\\\\b((http|https|ftp)://[^\\\\s]*)\\\\b');\n\t}\n\n\toverride function tryMatch(parser) {\n\t\treturn super.tryMatch(parser);\n\t}\n\n\toverride function onMatch(parser:InlineParser):Bool\n\t{\n\t\tvar url = pattern.matched(1);\n\n\t\tvar anchor = ElementNode.text('a', url.htmlEscape());\n\t\tanchor.attributes.set('href', url);\n\t\tparser.addNode(anchor);\n\n\t\treturn true;\n\t}\n}\n\n/**\n\tMatches syntax that has a pair of tags and becomes an element, like `*` for\n\t`<em>`. Allows nested tags.\n**/\nclass TagSyntax extends InlineSyntax\n{\n\tpublic var endPattern(default, null):EReg;\n\tpublic var tag(default, null):String;\n\n\tpublic function new(pattern:String, ?tag:String, ?end:String)\n\t{\n\t\tsuper(pattern);\n\t\tthis.tag = tag;\n\t\tthis.endPattern = new EReg((end == null) ? pattern : end, 'm');\n\t}\n\t\n\toverride function onMatch(parser:InlineParser):Bool\n\t{\n\t\tparser.stack.push(new TagState(parser.pos, \n\t\t\tparser.pos + pattern.matched(0).length, this));\n\t\treturn true;\n\t}\n\n\tpublic function onMatchEnd(parser:InlineParser, state:TagState):Bool\n\t{\n\t\tparser.addNode(new ElementNode(tag, state.children));\n\t\treturn true;\n\t}\n}\n\n/**\n\tMatches inline links like `[blah] [id]` and `[blah] (url)`.\n**/\nclass LinkSyntax extends TagSyntax\n{\n\tvar linkResolver:Resolver;\n\n\t// The regex for the end of a link needs to handle both reference style and\n\t// inline styles as well as optional titles for inline links. To make that\n\t// a bit more palatable, this breaks it into pieces.\n\tstatic var linkPattern = '\\\\](?:('+\n\t\t'\\\\s?\\\\[([^\\\\]]*)\\\\]'+\n\t\t'|'+\n\t\t'\\\\s?\\\\(([^ )]+)(?:[ ]*\"([^\"]+)\"|)\\\\)'+\n\t\t')|)';\n\n\t// The groups matched by this are:\n\t// 1: Will be non-empty if it's either a ref or inline link. Will be empty\n\t//    if it's just a bare pair of square brackets with nothing after them.\n\t// 2: Contains the id inside [] for a reference-style link.\n\t// 3: Contains the URL for an inline link.\n\t// 4: Contains the title, if present, for an inline link.\n\tpublic function new(?linkResolver:Resolver)\n\t{\n\t\tsuper('\\\\[', null, linkPattern);\n\t\tthis.linkResolver = linkResolver;\n\t}\n\n\toverride function onMatchEnd(parser:InlineParser, state:TagState):Bool\n\t{\n\t\tvar url:String;\n\t\tvar title:String;\n\n\t\t// If we didn't match refLink or inlineLink, then it means there was\n\t\t// nothing after the first square bracket, so it isn't a normal markdown\n\t\t// link at all. Instead, we allow users of the library to specify a special\n\t\t// resolver function ([linkResolver]) that may choose to handle\n\t\t// this. Otherwise, it's just treated as plain text.\n\t\tif ((endPattern.matched(1) == null) || (endPattern.matched(1) == ''))\n\t\t{\n\t\t\tif (linkResolver == null) return false;\n\n\t\t\t// Only allow implicit links if the content is just text.\n\t\t\t// TODO(rnystrom): Do we want to relax this?\n\t\t\tif (state.children.length != 1) return false;\n\t\t\tif (!Std.is(state.children[0], TextNode)) return false;\n\n\t\t\tvar link:TextNode = cast state.children[0];\n\n\t\t\t// See if we have a resolver that will generate a link for us.\n\t\t\tvar node = linkResolver(link.text);\n\t\t\tif (node == null) return false;\n\n\t\t\tparser.addNode(node);\n\t\t\treturn true;\n\t\t}\n\n\t\tif ((endPattern.matched(3) != null) && (endPattern.matched(3) != '')) {\n\t\t\t// Inline link like [foo](url).\n\t\t\turl = endPattern.matched(3);\n\t\t\ttitle = endPattern.matched(4);\n\n\t\t\t// For whatever reason, markdown allows angle-bracketed URLs here.\n\t\t\tif (url.startsWith('<') && url.endsWith('>'))\n\t\t\t{\n\t\t\t\turl = url.substring(1, url.length - 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Reference link like [foo] [bar].\n\t\t\tvar id = endPattern.matched(2);\n\t\t\tif (id == '')\n\t\t\t{\n\t\t\t\t// The id is empty (\"[]\") so infer it from the contents.\n\t\t\t\tid = parser.source.substring(state.startPos + 1, parser.pos);\n\t\t\t}\n\n\t\t\t// References are case-insensitive.\n\t\t\tid = id.toLowerCase();\n\n\t\t\t// Look up the link.\n\t\t\tvar link = parser.document.refLinks.get(id);\n\n\t\t\t// If it's an unknown link just emit plaintext.\n\t\t\tif (link == null) return false;\n\n\t\t\turl = link.url;\n\t\t\ttitle = link.title;\n\t\t}\n\n\t\tvar anchor = new ElementNode('a', state.children);\n\t\tanchor.attributes.set('href', url.htmlEscape());\n\t\t\n\t\tif ((title != null) && (title != ''))\n\t\t{\n\t\t\tanchor.attributes.set('title', title.htmlEscape());\n\t\t}\n\n\t\tparser.addNode(anchor);\n\t\treturn true;\n\t}\n}\n\n/**\n\tMatches inline links like `[blah] [id]` and `[blah] (url)`.\n**/\nclass ImgSyntax extends TagSyntax\n{\n\tvar linkResolver:Resolver;\n\n\t// The regex for the end of a link needs to handle both reference style and\n\t// inline styles as well as optional titles for inline links. To make that\n\t// a bit more palatable, this breaks it into pieces.\n\tstatic var linkPattern = '\\\\](?:('+\n\t\t'\\\\s?\\\\[([^\\\\]]*)\\\\]'+\n\t\t'|'+\n\t\t'\\\\s?\\\\(([^ )]+)(?:[ ]*\"([^\"]+)\"|)\\\\)'+\n\t\t')|)';\n\n\t// The groups matched by this are:\n\t// 1: Will be non-empty if it's either a ref or inline link. Will be empty\n\t//    if it's just a bare pair of square brackets with nothing after them.\n\t// 2: Contains the id inside [] for a reference-style link.\n\t// 3: Contains the URL for an inline link.\n\t// 4: Contains the title, if present, for an inline link.\n\tpublic function new(?linkResolver:Resolver)\n\t{\n\t\tsuper('!\\\\[', null, linkPattern);\n\t\tthis.linkResolver = linkResolver;\n\t}\n\n\toverride function onMatchEnd(parser:InlineParser, state:TagState):Bool\n\t{\n\t\tvar url:String;\n\t\tvar title:String;\n\n\t\t// If we didn't match refLink or inlineLink, then it means there was\n\t\t// nothing after the first square bracket, so it isn't a normal markdown\n\t\t// link at all. Instead, we allow users of the library to specify a special\n\t\t// resolver function ([linkResolver]) that may choose to handle\n\t\t// this. Otherwise, it's just treated as plain text.\n\t\tif ((endPattern.matched(1) == null) || (endPattern.matched(1) == ''))\n\t\t{\n\t\t\tif (linkResolver == null) return false;\n\n\t\t\t// Only allow implicit links if the content is just text.\n\t\t\t// TODO(rnystrom): Do we want to relax this?\n\t\t\tif (state.children.length != 1) return false;\n\t\t\tif (!Std.is(state.children[0], TextNode)) return false;\n\n\t\t\tvar link:TextNode = cast state.children[0];\n\n\t\t\t// See if we have a resolver that will generate a link for us.\n\t\t\tvar node = linkResolver(link.text);\n\t\t\tif (node == null) return false;\n\n\t\t\tparser.addNode(node);\n\t\t\treturn true;\n\t\t}\n\n\t\tif ((endPattern.matched(3) != null) && (endPattern.matched(3) != '')) {\n\t\t\t// Inline link like [foo](url).\n\t\t\turl = endPattern.matched(3);\n\t\t\ttitle = endPattern.matched(4);\n\n\t\t\t// For whatever reason, markdown allows angle-bracketed URLs here.\n\t\t\tif (url.startsWith('<') && url.endsWith('>'))\n\t\t\t{\n\t\t\t\turl = url.substring(1, url.length - 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Reference link like [foo] [bar].\n\t\t\tvar id = endPattern.matched(2);\n\t\t\tif (id == '')\n\t\t\t{\n\t\t\t\t// The id is empty (\"[]\") so infer it from the contents.\n\t\t\t\tid = parser.source.substring(state.startPos + 1, parser.pos);\n\t\t\t}\n\n\t\t\t// References are case-insensitive.\n\t\t\tid = id.toLowerCase();\n\n\t\t\t// Look up the link.\n\t\t\tvar link = parser.document.refLinks.get(id);\n\n\t\t\t// If it's an unknown link just emit plaintext.\n\t\t\tif (link == null) return false;\n\n\t\t\turl = link.url;\n\t\t\ttitle = link.title;\n\t\t}\n\n\t\tvar img = new ElementNode('img', null);\n\t\timg.attributes.set('src', url.htmlEscape());\n\t\tif (state.children.length == 1 && Std.is(state.children[0], TextNode))\n\t\t{\n\t\t\tvar alt:TextNode = cast state.children[0];\n\t\t\timg.attributes.set('alt', alt.text);\n\t\t}\n\t\t\n\t\tif ((title != null) && (title != ''))\n\t\t{\n\t\t\timg.attributes.set('title', title.htmlEscape());\n\t\t}\n\n\t\tparser.addNode(img);\n\t\treturn true;\n\t}\n}\n\n// Matches backtick-enclosed inline code blocks.\nclass CodeSyntax extends InlineSyntax\n{\n\tpublic function new(pattern:String)\n\t{\n\t\tsuper(pattern);\n\t}\n\t\n\toverride function onMatch(parser:InlineParser):Bool\n\t{\n\t\tparser.addNode(ElementNode.text('code', pattern.matched(1).htmlEscape()));\n\t\treturn true;\n\t}\n}\n\n// Keeps track of a currently open tag while it is being parsed. The parser\n// maintains a stack of these so it can handle nested tags.\nclass TagState\n{\n\t// The point in the original source where this tag started.\n\tpublic var startPos(default, null):Int;\n\n\t// The point in the original source where open tag ended.\n\tpublic var endPos(default, null):Int;\n\n\t// The syntax that created this node.\n\tpublic var syntax(default, null):TagSyntax;\n\n\t// The children of this node. Will be `null` for text nodes.\n\tpublic var children(default, null):Array<Node>;\n\n\tpublic function new(startPos:Int, endPos:Int, syntax:TagSyntax)\n\t{\n\t\tthis.startPos = startPos;\n\t\tthis.endPos = endPos;\n\t\tthis.syntax = syntax;\n\t\tchildren = [];\n\t}\n\t\n\t// Attempts to close this tag by matching the current text against its end\n\t// pattern.\n\tpublic function tryMatch(parser:InlineParser):Bool\n\t{\n\t\tif (syntax.endPattern.match(parser.currentSource) \n\t\t\t&& (syntax.endPattern.matchedPos().pos == 0))\n\t\t{\n\t\t\t// Close the tag.\n\t\t\tclose(parser);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// Pops this tag off the stack, completes it, and adds it to the output.\n\t// Will discard any unmatched tags that happen to be above it on the stack.\n\t// If this is the last node in the stack, returns its children.\n\tpublic function close(parser:InlineParser):Array<Node>\n\t{\n\t\t// If there are unclosed tags on top of this one when it's closed, that\n\t\t// means they are mismatched. Mismatched tags are treated as plain text in\n\t\t// markdown. So for each tag above this one, we write its start tag as text\n\t\t// and then adds its children to this one's children.\n\t\tvar index = parser.stack.indexOf(this);\n\n\t\t// Remove the unmatched children.\n\t\tvar unmatchedTags = //parser.stack.slice(index + 1);\n\t\t\tparser.stack.splice(index + 1, parser.stack.length-index);\n\n\t\t// Flatten them out onto this tag.\n\t\tfor (unmatched in unmatchedTags)\n\t\t{\n\t\t\t// Write the start tag as text.\n\t\t\tparser.writeTextRange(unmatched.startPos, unmatched.endPos);\n\n\t\t\t// Bequeath its children unto this tag.\n\t\t\tfor (child in unmatched.children)\n\t\t\t\tchildren.push(child);\n\t\t}\n\n\t\t// Pop this off the stack.\n\t\tparser.writeText();\n\t\tparser.stack.pop();\n\n\t\t// If the stack is empty now, this is the special \"results\" node.\n\t\tif (parser.stack.length == 0) return children;\n\n\t\t// We are still parsing, so add this to its parent's children.\n\t\tif (syntax.onMatchEnd(parser, this))\n\t\t{\n\t\t\tparser.consume(syntax.endPattern.matched(0).length);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Didn't close correctly so revert to text.\n\t\t\tparser.start = startPos;\n\t\t\tparser.advanceBy(syntax.endPattern.matched(0).length);\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","package utils;\n\nusing StringTools;\n\nclass TimeUtil{\n\n\n\tpublic static function readableTime(mlseconds:Int):String\n\t{\n\t\tvar totalSec \t: Int = Math.floor( mlseconds/1000 );\n\t\tvar hours \t\t: Int = Math.floor( (totalSec / 3600 ) % 24);\n\t\tvar minutes \t: Int = Math.floor( (totalSec / 60 ) % 60);\n\t\tvar seconds \t: Int = Math.floor( (totalSec % 60 ));\n\t\tvar result = Std.string(hours).lpad(\"0\",2) + \":\" + Std.string(minutes).lpad(\"0\",2) + \":\" + Std.string(seconds).lpad(\"0\",2);\n\t\treturn result;\n\t}\n\n\tpublic static function readableDate(date:Date):String\n\t{\n\t\treturn '${Std.string(date.getHours()).lpad('0',2)}:${Std.string(date.getMinutes()).lpad('0',2)}:${Std.string(date.getSeconds()+1).lpad('0',2)}';\n\t}\n\n\tpublic static function countdown(minutes:Int,mlseconds:Int) : String\n\t{\n\t\tvar totalSec : Int =  Math.round( minutes * 60);\n\t\tvar progressSec  =  Math.round( mlseconds/1000 );\n\t\tvar temp = totalSec - progressSec;\n\t\t\n\t\tif (temp <= 0) temp = 0;\n\t\treturn TimeUtil.readableTime(temp*1000);\n\t}\n\n\tpublic static function countdownSeconds(seconds:Int,mlseconds:Int) : String\n\t{\n\t\tvar totalSec : Int =  Math.round( seconds);\n\t\tvar progressSec  =  Math.round( mlseconds/1000 );\n\t\tvar temp = totalSec - progressSec;\n\t\t\n\t\tif (temp <= 0) temp = 0;\n\t\treturn TimeUtil.readableTime(temp*1000);\n\t}\n\n\n}","package view;\n\nimport js.Browser;\nimport js.html.*;\n\nimport model.App;\n\nusing StringTools;\n\nclass SlidrrView\n{\n\tpublic var notesHtml ( get_notesHtml , set_notesHtml ) : String;\n\tprivate var _notesHtml : String;\n\n\tfunction get_notesHtml () : String {\n\t\treturn _notesHtml;\n\t}\n\tfunction set_notesHtml(value : String) : String {\n\t\treturn _notesHtml = value;\n\t}\n\n\tpublic var totalSlides ( get_totalSlides , set_totalSlides ) : Int;\n\tprivate var _totalSlides : Int;\n\n\tfunction get_totalSlides () : Int {\n\t\treturn _totalSlides;\n\t}\n\tfunction set_totalSlides(value : Int) : Int {\n\t\treturn _totalSlides = value;\n\t}\n\n\tpublic function new(md:String,el:Element,slideId:Int)\n\t{\n\t\t// var flexContainer = Browser.document.createDivElement();\n\t\t// flexContainer.className = 'slidrr-container';\n\n\t\t// get all chapters\n\t\tvar slides : Array<String> = md.split('\\n'+App.spliteSlide+'\\n');\n\t\ttotalSlides = slides.length;\n\t\tvar i = slideId;\n\n\t\t// get notes from 1 chapter\n\t\tvar slideArr = slides[i].split('\\n'+App.splitNote+'\\n');\n\t\tvar vo : BackgroundVO = stripBackground(slideArr[0]);\n\t\tvar slideHTML = Markdown.markdownToHtml(vo.markdown);\n\t\tnotesHtml = (slideArr.length>1) ? Markdown.markdownToHtml(slideArr[1]) : '' ;\n\n\t\tvar container = Browser.document.createDivElement();\n\t\tcontainer.className = 'slidrr-flex';\n\n\t\tvar div = Browser.document.createDivElement();\n\t\tdiv.id = \"slidrr-\" + i;\n\t\tdiv.className = ('slidrr');\n\n\t\tvar container = Browser.document.createDivElement();\n\t\tcontainer.className = 'slidrr-flex';\n\t\tcontainer.innerHTML = slideHTML + '<!-- :: note :: \\n' + notesHtml + '\\n -->';\n\n\t\tif(vo.url != ''){\n\t\t\tdiv.className += ' slidrr-fullscreen glow';\n\t\t\tif(vo.url.endsWith(\"?\")) div.className += ' slidrr-fullscreen slidrr-fullscreen-contain glow';\n\t\t\tdiv.style.backgroundImage = 'url(${vo.url})';\n\t\t}\n\t\tif(vo.color != '') {\n\t\t\tif(vo.url == '') div.className += ' glow';\n\t\t\tdiv.style.backgroundColor = '${vo.color}';\n\t\t\tvar hex = Std.parseInt (vo.color.replace(\"#\",\"0x\"));\n\t\t\t// [mck] check if background color is half white/black and change the color of the text\n\t\t\tif(hex > (0xffffff/2)) div.className += ' dark';\n\t\t}\n\n\t\tdiv.appendChild(container);\n\t\tel.appendChild(div);\n\n\t\t// test\n\t\t// var div2 = Browser.document.createDivElement();\n\t\t// div2.id = \"slidrr-mini-\" + i;\n\t\t// div2.className = ('mini-slide');\n\t\t// div2.innerHTML = slideHTML + '<!-- :: note :: \\n' + noteHTML + '\\n -->';\n\n\n\n\t\t// el.appendChild(flexContainer);\n\t}\n\n\t/**\n\t * check if the first item is an image, then make it full screen\n\t * if the first item is not an image, this will do nothing and return ['','markdown']\n\t *\n\t * @param\t\tcontent of markdown file\n\t *\n\t * @return \t\tBackgroundVO with {markdown, color, url}\n\t */\n\tfunction stripBackground (md:String) : BackgroundVO\n\t{\n\t\t// default values\n\t\tvar _url = '';\n\t\tvar _color = '';\n\t\tvar _markdown = md;\n\n\t\t// check for image, check if first item is image\n\t\tif (md.indexOf('![') != -1){\n\t\t\t// [mck] there is an image in the md\n\t\t\tvar temp = md.substring(0, md.indexOf('!['));\n\t\t\tif(temp.replace('\\n','').replace('\\t','').replace('\\r','').replace(' ','').length == 0){\n\t\t\t\t_markdown = '';\n\t\t\t\t// [mck] get image and the rest of the _markdown content\n\t\t\t\tvar arr = md.split('\\n');\n\t\t\t\tfor ( i in 0 ... arr.length ) {\n\t\t\t\t\tif (arr[i].indexOf('![') != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\t_color = validColor (arr[i]);\n\t\t\t\t\t\t_url = arr[i].split('](')[1].replace(')','');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_markdown += arr[i] + '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar _vo : BackgroundVO  = {\n\t\t\turl : _url,\n\t\t\tcolor : _color,\n\t\t\tmarkdown : _markdown\n\t\t};\n\n\t\treturn _vo;\n\t}\n\n\tfunction validColor(str:String):String\n\t{\n\t\tvar _str = '';\n\t\tvar _temp = str.split('](')[0].replace('![', '').ltrim().rtrim();\n\t\tif (_temp.indexOf('#') == 0){\n\t\t\t_str = _temp;\n\t\t}\n\t\treturn _str;\n\t}\n\n}\n\n\ntypedef BackgroundVO =\n{\n\tvar url : String;\n\tvar color : String;\n\tvar markdown : String;\n}","package view;\n\nimport js.Browser;\nimport js.html.*;\n\nimport model.App;\n\nusing StringTools;\n\nclass SpeakrrNotesView\n{\n\tprivate var _doc = js.Browser.document;\n\tprivate var _win = js.Browser.window;\n\t\n\tprivate var timer = new haxe.Timer(1000); // 1000ms delay\n\tprivate var startTime : Date;\n\tprivate var slideStartTime : Date;\n\t\n\tvar slideCurrent : DivElement;\n\tvar slideNext : DivElement;\n\t\n\tvar slideCurrentContainer : DivElement;\n\tvar slideNextContainer : DivElement;\n\t\n\tvar totalSlides : Int;\n\t\n\tpublic function new(md:String) \n\t{\n\t\tBrowser.console.info('Speakrr-Notes');\t\n\t\t\t\n\t\tslideCurrent = cast (_doc.getElementById('current-slide'), DivElement);\n\t\tslideNext = cast (_doc.getElementById('upcoming-slide'), DivElement);\n\t\t\n\t\tbuildNotes(md);\n\t\tonResizeHandler();\n\t\t\n\t\t_win.onresize = function (){\n\t\t\tonResizeHandler();\n\t\t}\n\t}\n\n\t/**\n\t* use one js for both windows\n\t* slidrr-presentation mode\n\t* and slidrr-speakrr-notes mode\n\t*/\n\tfunction buildNotes (md:String)\n\t{\n\t\tslideCurrentContainer = _doc.createDivElement();\n\t\tslideCurrentContainer.className = 'slidrr-container current-slidrr';\n\t\tslideCurrent.appendChild(slideCurrentContainer);\n\n\t\tslideNextContainer = _doc.createDivElement();\n\t\tslideNextContainer.className = 'slidrr-container next-slidrr';\n\t\tslideNext.appendChild(slideNextContainer);\n\n\t\tvar currentSlide = new view.SlidrrView(md,slideCurrentContainer,5);\n\t\tvar nextSlide = new view.SlidrrView(md,slideNextContainer,4);\n\t\ttotalSlides = nextSlide.totalSlides;\n\n\t\tvar elSpeakrrNotes = Browser.document.getElementsByClassName(\"speaker-controls-notes\")[0];\n\t\tif(elSpeakrrNotes != null && currentSlide.notesHtml != ''){\n\t\t\telSpeakrrNotes.innerHTML = currentSlide.notesHtml;\n\t\t}\t\t\n\n\t\t// [mck] start highlight plugin? // doesn't work yet in original mode (opening with `s`)...\n\t\tuntyped hljs.initHighlightingOnLoad();\n\t\t\n\t\trestartSlideTimer();\n\t\tstartTime = Date.now();\n\t\ttimer.run = function () {setClock();};\n\t}\n\t\n\tfunction restartSlideTimer() : Void\n\t{\n\t\tslideStartTime = Date.now();\t\n\t}\n\n\t/**\n\t * countdown time (let's say 10 min)\n\t * totalSlides number is 20  \n\t * means approximatly 30 seconds per slide\n\t */\n\tfunction setClock():Void\n\t{\n\t\tvar timer = _doc.getElementsByClassName('timer')[0];\n\t\tvar clock = _doc.getElementsByClassName('clock')[0];\n\t\tvar countdown = _doc.getElementsByClassName('countdown')[0];\n\t\tvar slidecountdown = _doc.getElementsByClassName('slide-countdown')[0];\n\t\tvar temp = _doc.getElementsByClassName('temp2')[0];\n\t\t\n\t\t// App.time in minutes \n\t\tvar totalPresentationTimeSec : Int =  Math.round( App.time * 60);\n\t\t// time per slide \n\t\tvar perSlideTimeSec = Std.int (totalPresentationTimeSec / totalSlides);\n\t\t\n\t\tvar now = Date.now();\n\t\tvar progress = Std.int (now.getTime() - startTime.getTime());\n\t\tvar slideprogress = Std.int (now.getTime() - slideStartTime.getTime());\n\t\ttimer.innerHTML = '<span class=\"time-text\">during :</span><span class=\"time\">${utils.TimeUtil.readableTime(progress)}</span>';\n\t\tclock.innerHTML = '<span class=\"time-text\">time:</span><span class=\"time\">${utils.TimeUtil.readableDate(now)}</span>';\n\t\tcountdown.innerHTML = '<span class=\"time-text\">countdown:</span><span class=\"time\">${utils.TimeUtil.countdown(App.time,progress)}</span>';\n\t\tslidecountdown.innerHTML = '<span class=\"time-text\">slide countdown:</span><span class=\"time\">${utils.TimeUtil.countdownSeconds(perSlideTimeSec,slideprogress)}</span>';\n\t\ttemp.innerHTML = 'total slides: ${totalSlides}, totaltime: ${App.time} minutes, time per slide: ${perSlideTimeSec} seconds';\n\t\t\n\t}\n\t\n\t\n\tpublic function onResizeHandler () : Void \n\t{\n\t\tvar w = Browser.window.innerWidth;\n\t\t\n\t\t// 1024 x 768px;\n\t\t// 60 / 40\n\t\tvar currentScale = 0.60;\n\t\t\n\t\tslideCurrent.style.width = Std.string(Math.floor(w * currentScale)) + 'px'; \n\t\tslideCurrent.style.height = Std.string(Math.floor((slideCurrent.clientWidth / 1024) * 768)) + 'px';\n\t\t\n\t\t// trace('w: ${w}');\n\t\t// trace('width: ${Math.floor(w * currentScale)}');\n\t\t// trace('height: ${(slideCurrent.clientWidth / 1024) * 768}');\n\t\t\n\t\tslideNext.style.width = Std.string(Math.floor(w * (1-currentScale))) + 'px'; \n\t\tslideNext.style.height = Std.string(Math.floor((slideNext.clientWidth / 1024) * 768)) + 'px';\n\t\t\n\t\tscaleEl();\t\n\t}\n\t\n\t/*\n\ttransform-origin: left top;\n\t-ms-transform: scale(0.5, 0.5); / * IE 9 * /\n    -webkit-transform: scale(0.5, 0.5); / * Safari * /\n    transform: scale(0.5, 0.5);\t\n\t*/\n\tfunction scaleEl ()\n\t{\n\t\t// trace('${slideCurrent.clientWidth} / ${slideCurrentContainer.clientWidth}');\n\t\t\n\t\tvar scale = 0.1; \n\t\tif(slideCurrentContainer != null) {\n\t\t\tscale = slideCurrent.clientWidth / 1024;\n\t\t\tslideCurrentContainer.style.transform = 'scale($scale,$scale)';\n\t\t} \n\t\tif(slideNextContainer != null){\n\t\t\tscale = slideNext.clientWidth / 1024;\n\t\t\tslideNextContainer.style.transform = 'scale($scale,$scale)';\n\t\t} \n\t}\n\t\n}","package model;\n\nclass App\n{\n\n\t// default\n\tpublic static var spliteSlide \t: String = '--';\n\tpublic static var splitNote \t: String = '??';\n\tpublic static var markdown \t\t: String = 'slidrr.md'; \n\tpublic static var author \t\t: String = ''; \n\tpublic static var css \t\t\t: String = '';\n\tpublic static var time \t\t\t: Int = 10; // min\n\n}"],
"names":[],
"mappings":"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"
}